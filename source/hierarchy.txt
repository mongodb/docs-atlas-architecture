.. _arch-center-hierarchy:

=====================================================
{+service+} Organizations, Projects, and {+Clusters+}
=====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

Organizations, projects, and {+clusters+} are the building blocks
of your {+service+} enterprise estate: 

- At the organization level, you can implement security controls and
  create users that work across one or more projects. 
- Projects offer a more fine-grained security isolation and
  authorization boundary.
- {+Clusters+} are your cloud databases in {+service+}.

Use the foundational guidance on this page to design the layout of your
organizations, projects, and {+clusters+} based on your company's
hierarchy and expected number of {+clusters+} and projects. This
guidance helps you optimize your security and performance from the
start while aligning with your enterprise's billing and access needs.

{+service+} Features and Recommendations for Hierarchy
------------------------------------------------------

Features
~~~~~~~~

You can use the following levels of hierarchy to define
security settings and governance for your {+service+} enterprise estate:

.. list-table::
   :header-rows: 1
   :widths: 20 40

   * - {+service+} Hierarchy Level
     - Description

   * - (Optional) Paying Organization
     - One organization can be a paying organization for other
       organization(s). The MongoDB account team must enable the paying organization when you establish the |service| subscription. A paying organization lets you set up :atlas:`cross-organization billing <billing/#std-label-cross-org-billing>` to share a
       billing subscription across multiple organizations.

       A paying organization is common for large enterprises with many
       {+BU+}\s or departments that operate independently but where the
       contract or bill is owned by a central authority.

   * - Organization
     - An organization can contain many projects under it and provides
       a container to apply shared integration and security settings.
       An organization often maps to a {+BU+} or department within a
       company. The built-in {+service+} Cost Explorer aggregates cloud
       spend at the organization level and breaks out line items at the
       {+cluster+} level below it. You can customize further
       by leveraging the billing API.

   * - Project
     - Security configuration for the data plane (including database
       clusters, network security, and other data services) occurs at the project level. A project often maps to an application and environment (for example: Customer Portal app -
       Production environment). For each project, there is one dedicated VPC created in GCP, and one VPC/VNet per region in AWS
       and Azure. 

   * - {+Cluster+}
     - |service| provisions each {+cluster+} within the dedicated 
       VPC/VNet(s) for a project. The security configuration is shared
       among {+clusters+} in the project, except for user roles and authorization, which you can apply to actions on a {+cluster+},
       database, and collection level.

.. figure:: /includes/images/project-hierarchy.png
   :alt: An image showing org, project, and cluster hierarchy.
   :align: center
   :lightbox:

.. _arch-center-recommendations:

Recommendations
~~~~~~~~~~~~~~~

Development, Testing, Staging, and Production Environments
``````````````````````````````````````````````````````````

We recommend that you use the following four environments to isolate
your sandbox and test projects and {+clusters+} from your application
projects and {+clusters+}:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - Environment
     - Description

   * - Development (Dev)
     - Allow developers to freely try new things in a safe sandbox
       environment.

   * - Testing (Test)
     - Test specific components or functions created in the dev
       environment.
     
   * - Staging
     - Stage all components and
       functions together to make sure the entire application works 
       as expected before deploying to production. Staging is similar to
       the test environment, but ensures that new components work well 
       with existing components.
    
   * - Production (Prod)
     - The back end for your application that is live for your
       end users.

BYOK Encryption
```````````````

.. include:: /includes/byok-encryption-recommendations.rst

Local {+service+} Deployments
`````````````````````````````

For your dev and test environments, you can also develop {+service+}
{+clusters+} locally with the {+atlas-cli+}. This can enable developers
to work locally from their machine and cut down on costs for
development and test environments. To learn more, see 
:atlascli:`Create a Local {+service+} Deployment
<atlas-cli-deploy-local>`.

Org and Project Hierarchies
````````````````````````````

Generally, we recommend a paying organization that is managed
centrally, and one organization for each {+BU+} or department that is
linked to the paying org. Then, create a project with one {+cluster+}
each for your lower (dev/test) and upper environments. To learn more,
see the following information for :ref:`<project-hierarchy-1>`.

If you will easily hit the 250 project limit per organization, we
recommend creating one organization per environment, such as one each
for lower and upper environments, or one each for dev, test, staging,
and prod. This has an added benefit of additional isolation.

.. _project-hierarchy-1:

Recommended Hierarchy
#####################

Consider the following hierarchy, which creates fewer |service| organizations, if you have common teams and permissions across the 
{+BU+} and less than the raiseable limit of 250 projects per organization. 

.. figure:: /includes/images/paying-org-hierarchy.png
   :alt: An image showing a paying organization with other organizations nested beneath it.
   :align: center
   :lightbox:

.. _project-hierarchy-2:

Recommended Hierarchy 2: Decentralized Business Units/Departments
#################################################################

Consider the following hierarchy if your organization is highly
decentralized without a centralized function to serve as the contract
and billing owner. In this hierarchy, each {+BU+},
department, or team has their own {+service+} organization. This
hierarchy is useful if each of your teams is fairly independent, they
don't share people or permissions within the company, or they want to
buy credits themselves through the cloud provider marketplace or
directly with their own contract. There is no paying organization in
this hierarchy.

.. figure:: /includes/images/no-paying-org-hierarchy.png
   :alt: An image showing multiple organizations without a paying organization above them.
   :align: center
   :lightbox:

.. _deployment-hierarchy:

{+Cluster+} Hierarchy
`````````````````````

To maintain isolation between environments, we recommend one 
{+cluster+} deployment per {+service+} project, corresponding to each
application as shown in the following diagram:

.. figure:: /includes/images/deployment-hierarchy.png
   :alt: An image showing one deployment per project in each organization.
   :align: center
   :lightbox:

Grouping multiple {+clusters+} and therefore applications into one
project by environment as shown in the following diagram simplifies
administration when the same team is responsible for multiple
applications across environments. This eases the setup cost for
features such as private endpoints and customer-managed keys, since all {+clusters+} in the same project share this configuration. However,
this {+cluster+} hierarchy may violate the least-privilege rule.

You should use this hierarchy only if both of the following are true:

- Every team member with access to the project is working on all other
  applications and {+clusters+} in the
  project. 
- You are creating {+clusters+} for lower environments. Production
  {+clusters+} should still follow the rule of single 
  {+cluster+}, single project to ensure isolation.

.. figure:: /includes/images/alt-deployment-by-environment.png
   :alt: An image showing deployments grouped by environment.
   :align: center
   :lightbox:

{+Cluster+} Tagging
```````````````````

We recommend that you tag {+clusters+} with the following details to
enable easy parsing for reporting and integrations:

- {+BU+} or Department
- Team name
- Application name
- Environment
- Version
- Email contact
- Criticality (indicates the tier of data stored on the {+cluster+},
  including any sensitive classifications such as {+PII+} or {+PHI+})

To learn more about parsing billing data using tags, see
:ref:`arch-center-billing-data`.

.. _arch-center-cluster-size-guide:

{+service+} {+Cluster+} Size Guide
``````````````````````````````````

Use the following {+cluster+} size guide to select a {+cluster+} tier that ensures performance without over-provisioning. The {+cluster+} size guide also provides recommendations on which {+cluster+} tiers
are suitable for development and testing environments, and which are
suitable for staging and production environments.

The {+cluster+}
size guide uses "t-shirt sizing," a common analogy used in software
development and infrastructure to describe capacity planning in a
simplified manner. You should consider t-shirt sizes as approximate
starting points. Sizing a {+cluster+} is an iterative process based on
changing resource needs, performance requirements, workload
characteristics, and growth expectations.

.. important::
   
   This guidance excludes mission-critical applications, high-memory
   workloads, and high-CPU workloads. For mission-critical
   applications, high-memory workloads, and high-CPU workloads, contact
   |mdb-support| for customized guidance.

You can estimate 
the {+cluster+} resources required by using your organization's approximate data size and workload:

- **Total Storage Required**: 50% of the
  total raw data size
- **Total RAM Required**: 10% of the total raw data size
- **Total CPU Cores Required**: expected peak read/write database
  operations per second ÷ 4000
- **Total Storage IOPS Required**: expected peak database writes per
  second (min IOPS = 5%, max IOPS = 95%)

.. list-table::
   :header-rows: 1
   :widths: 10 10 20 20 10 10 10 20

   * - T-Shirt Size
     - Cluster Tier
     - Storage Range: AWS/{+gcp+}
     - Storage Range: Azure
     - CPUs (#)
     - Default RAM
     - IOPS
     - Recommended For

   * - Small
     - ``M10`` [1]_
     - 10 GB to 128 GB
     - 8 GB to 128 GB
     - 2
     - 2 GB
     - 1000
     - Dev/Test only

   * - Med
     - ``M30``
     - 10 GB to 512 GB
     - 8 GB to 512 GB
     - 2
     - 8 GB
     - 3000
     - Prod

   * - Large
     - ``M50``
     - 10 GB to 4 TB
     - 8 GB to 4 TB
     - 16
     - 32 GB
     - 3000
     - Prod

   * - X-Large
     - ``M80``
     - 10 GB to 4 TB
     - 8 GB to 4 TB
     - 32
     - 128 GB
     - 3000
     - Prod

.. [1] ``M10`` is a shared CPU tier. For highly-regulated industries or sensitive data, your minimum and smallest starting tier should be ``M30``.

To learn more about {+cluster+} tiers and the regions that support
them, see the {+service+} documentation for each cloud provider:

- :atlas:`AWS </reference/amazon-aws/>`
- :atlas:`Azure </reference/microsoft-azure/>`
- :atlas:`{+gcp+} </reference/google-gcp/>`

.. _arch-center-create-hierarchy-example:

Examples
--------

.. include:: /includes/complete-examples.rst

The following examples create organizations, projects, and {+clusters+}
using |service| :ref:`tools for automation <arch-center-automation>`.

These examples also apply other recommended configurations, including:

.. tabs::

   .. tab:: Dev and Test Environments
      :tabid: devtest

      .. include:: /includes/shared-settings-clusters-devtest.rst

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      .. include:: /includes/shared-settings-clusters-stagingprod.rst

.. tabs::

   .. tab:: CLI
      :tabid: cli

      .. note::

         Before you
         can create resources with the {+atlas-cli+}, you must:

         - :atlas:`Create your paying organization 
           </billing/#configure-a-paying-organization>` and :atlas:`create an API key </configure-api-access/>` for the
           paying organization.
         - :atlascli:`Install the {+atlas-cli+} </install-atlas-cli/>` 
         - :atlascli:`Connect from the {+atlas-cli+} 
           </connect-atlas-cli/>` using the steps for :guilabel:`Programmatic Use`.

      Create the Organizations
      ~~~~~~~~~~~~~~~~~~~~~~~~

      Run the following command for each {+BU+}. Change
      the IDs and names to use your actual values:

      .. code-block::

         atlas organizations create ConsumerProducts --ownerId 508bb8f5f11b8e3488a0e99e --apiKeyRole ORG_OWNER --apiKeyDescription consumer-products-key

      For more configuration options and info about this example, 
      see :ref:`atlas-organizations-create`.

      To get the user IDs and organization IDs, see the following
      commands:

      - :ref:`atlas-organizations-list`
      - :ref:`atlas-organizations-users-list`

      Create the Projects
      ~~~~~~~~~~~~~~~~~~~

      Run the following command for each application and environment pair. Change the IDs and names to use your values:

      .. include:: /includes/examples/cli-example-create-projects.rst

      For more configuration options and info about this example, 
      see :ref:`atlas-projects-create`.

      To get the project IDs, see the following command:

      - :ref:`atlas-projects-list`

      Configure BYOK Encryption
      ~~~~~~~~~~~~~~~~~~~~~~~~~

      .. include:: /includes/byok-encryption-recommendations-short.rst

      You can't manage |byok| encryption with the {+atlas-cli+}. 
      Use the following methods to configure |byok| encryption:

      - :atlas:`{+atlas-ui+} </security-kms-encryption>`
      - :oas-atlas-tag:`{+atlas-admin-api+} </Encryption-at-Rest-using-Customer-Key-Management>`

      Create One {+Cluster+} Per Project
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      .. tabs::

         .. tab:: Dev and Test Environments
            :tabid: devtest

            For your development and testing environments, run the following command for each project that you created. Change
            the IDs and names to use your values:

            .. include:: /includes/examples/cli-example-create-clusters-devtest.rst

         .. tab:: Staging and Prod Environments
            :tabid: stagingprod

            For your staging and production environments, create the following ``cluster.json`` file for each project that you
            created. Change the IDs and names to use your values:

            .. include:: /includes/examples/cli-json-example-create-clusters.rst

            After you create the ``cluster.json`` file, run the
            following command for each project that you created. The
            command uses the ``cluster.json`` file to create a cluster.

            .. include:: /includes/examples/cli-example-create-clusters-stagingprod.rst 

      For more configuration options and info about this example, 
      see :ref:`atlas-clusters-create`.

   .. tab:: Terraform
      :tabid: tf

      .. note::

         Before you
         can create resources with Terraform, you must:

         - :atlas:`Create your paying organization 
           </billing/#configure-a-paying-organization>` and :atlas:`create an API key </configure-api-access/>` for the
           paying organization. Store your API key as environment
           variables by running the following command in the terminal:

           .. code-block::

              export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
              export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

         - `Install Terraform 
           <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__ 

      Create the Projects and Deployments
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      .. tabs::

         .. tab:: Dev and Test Environments
            :tabid: devtest

            For your development and testing environments, create the
            following files for each application and environment 
            pair. Place the files for each application and environment
            pair in their own directory. Change the IDs and names to use your values:

            main.tf
            ```````

            .. include:: /includes/examples/tf-example-main-devtest.rst 

            variables.tf
            ````````````

            .. include:: /includes/examples/tf-example-variables.rst

            terraform.tfvars
            ````````````````

            .. include:: /includes/examples/tf-example-tfvars-devtest.rst

            provider.tf
            ```````````

            .. include:: /includes/examples/tf-example-provider.rst

         .. tab:: Staging and Prod Environments
            :tabid: stagingprod

            For your staging and production environments, create the
            following files for each application and environment 
            pair. Place the files for each application and environment
            pair in their own directory. Change the IDs and names to use your values:

            main.tf
            ```````

            .. include:: /includes/examples/tf-example-main-stagingprod.rst 

            variables.tf
            ````````````

            .. include:: /includes/examples/tf-example-variables.rst

            terraform.tfvars
            ````````````````

            .. include:: /includes/examples/tf-example-tfvars-stagingprod.rst

            provider.tf
            ```````````

            .. include:: /includes/examples/tf-example-provider.rst
      
      For more configuration options and info about this example, 
      see |service-terraform| and the `MongoDB Terraform Blog Post
      <https://www.mongodb.com/developer/products/atlas/deploy-mongodb-atlas-terraform-aws/>`__.

      Configure BYOK Encryption
      ~~~~~~~~~~~~~~~~~~~~~~~~~

      .. tabs::

         .. tab:: Dev and Test Environments
            :tabid: devtest

            For your development and testing environments, consider skipping |byok| encryption 
            environments to save costs, unless you're in a highly-regulated industry
            or storing sensitive data. To learn more, see :ref:`arch-center-recommendations`.

         .. tab:: Staging and Prod Environments
            :tabid: stagingprod

            For your staging and production environments environments, we
            recommend enabling |byok| encryption when provisioning your {+clusters+}.
            To learn more, see :ref:`arch-center-recommendations`.

      To enable |byok| encryption with Terraform, 
      create the following resources. Change the IDs and names to use your values:

      .. tabs::
         
         .. tab:: AWS
            :tabid: aws

            .. tip:: 

               For a complete configuration example, see
               :github:`Atlas Terraform Provider Example <mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster>`.

               Alternatively, to simplify the configuration process, you can use the
               `encryption at rest Terraform module <https://registry.terraform.io/modules/terraform-mongodbatlas-modules/encryption-at-rest/mongodbatlas/latest>`__.

            .. include:: /includes/examples/tf-example-byok-aws.rst
         
         .. tab:: Azure
            :tabid: azure

            .. tip:: 

               For a complete configuration example, see
               :github:`Atlas Terraform Provider Example <mongodb/terraform-provider-mongodbatlas/tree/master/examples/mongodbatlas_encryption_at_rest/azure>`.

            .. include:: /includes/examples/tf-example-byok-azure.rst
         
         .. tab:: GCP
            :tabid: gcp

            .. include:: /includes/examples/tf-example-byok-gcp.rst
      
      For more configuration options and info about this example, 
      see `Terraform documentation 
      <https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/encryption_at_rest>`__.

      Create the Projects and Deployments
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      After you create the files, navigate to each application and environment pair's directory and run the following
      command to initialize Terraform:

      .. code-block::

         terraform init

      Run the following command to view the Terraform plan:

      .. code-block::

         terraform plan
      
      Run the following command to create one project and one deployment for the application and environment pair. The command uses the files and the |service-terraform| to
      create the projects and clusters:

      .. code-block::

         terraform apply

      When prompted, type ``yes`` and press :kbd:`Enter` to apply
      the configuration. 

Next Steps
----------

After you plan the hierarchy and size for your organizations, projects,
and {+clusters+}, see the following suggested resources or use the left
navigation to find features and best practices for each {+waf+} pillar.

- :ref:`arch-center-monitoring-alerts`
- :ref:`arch-center-network-security`
- :ref:`arch-center-backups`

