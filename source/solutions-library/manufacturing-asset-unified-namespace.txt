.. _arch-center-is-unified-namespace:

================================
Unified Namespace Data Integrity
================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: unified namespace, manufacturing, modernization, odl, IoT
   :description: Explore manufacturing efficiency with a Unified
                 Namespace solution for seamless data integration and real-time
                 insights. Discover how to enhance your operations.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB aids manufacturers by unifying operational data, enhancing
production efficiency, enabling real-time insights, and optimizing
processes.

**Use cases:** `App-Driven Analytics
<https://www.mongodb.com/resources/solutions/use-cases/application-driven-intelligence>`__,
`IoT <https://www.mongodb.com/solutions/use-cases/internet-of-things>`__,
`Single View <https://www.mongodb.com/solutions/use-cases/single-view>`__

**Industries:** `Manufacturing & Mobility
<https://www.mongodb.com/solutions/industries/manufacturing>`__

**Products:** `Atlas Database
<https://www.mongodb.com/products/platform/atlas-database>`__, `Atlas
Charts <https://www.mongodb.com/products/platform/atlas-charts>`__,
`Change Streams
<https://www.mongodb.com/resources/products/capabilities/change-streams>`__,
`MongoDB Time Series
<https://www.mongodb.com/products/capabilities/time-series>`__

**Partners:** `Cedalo (Mosquitto)
<https://cedalo.com/blog/mqtt-to-mongodb-integration/>`__, `Kafka
Connector
<https://www.mongodb.com/products/integrations/kafka-connector>`__ 

Solution Overview
-----------------

Manufacturing is experiencing a profound transformation through the
integration of real-time data and centralized data management tools like
the Unified Namespace (UNS) model. Modern factories generate vast
amounts of data from various systems like enterprise resource planning
(ERP), manufacturing execution system (MES), and shop floor machines. As
manufacturers move towards connected and automated systems, unifying
these data sources is crucial. `Deloitte reports
<https://www2.deloitte.com/us/en/insights/industry/manufacturing/manufacturing-industry-outlook.html>`__
that smart factory initiatives can boost productivity by up to 12% and
improve equipment effectiveness by up to 20%. Achieving these gains
requires an effective data management strategy, one that leverages UNS
models supported by robust solutions like MongoDB.

The unified approach facilitates real-time data visibility and seamless
integration, helping to optimize processes and enhance operational
efficiency. By breaking down traditional hierarchical data flows,
manufacturers can leverage both historical and real-time insights for
strategic planning and continuous improvements.

An effective UNS system proactively integrates and contextualizes data,
taking steps to achieve organizational objectives without needing
constant human intervention. Rather than merely reporting isolated data
points, a UNS using MongoDB can autonomously unify and analyze data from
diverse manufacturing systems, uncover critical insights, and facilitate
informed decision-making.

In this solution, we develop a comprehensive Unified Namespace framework
using MongoDB’s capabilities for flexible data modeling, real-time
processing, and scalability.

The setup ingests various operational data types, analyzes streams for
actionable insights, stores the information in MongoDB, and provides
strategic recommendations based on comprehensive analytics with data
from different sources and types.

Reference Architectures
-----------------------

.. figure:: /includes/images/industry-solutions/unified-namespace-architecture.svg
   :figwidth: 1200px
   :alt: Architecture diagram for the unified namespace solution
   
   Figure 1. Leafy factory UNS architecture

In the `Leafy Factory demo
<https://github.com/mongodb-industry-solutions/leafy_factory>`__, SQL
data from a simulated MES is efficiently ingested into MongoDB,
encompassing key production planning, monitoring, and quality metrics.
This data, captured in MongoDB's flexible, document-based JSON format,
ensures that MES information remains organized and readily accessible
for real-time analysis and reporting. Similarly, SQL-based ERP data—such
as work orders, material tracking, and cost breakdowns—is seamlessly
integrated using a combination of Kafka change streams and the MongoDB
Sink connector. The SQL data is ingested into Kafka topics through the
Debezium connector, with SQL functioning as a Kafka producer. This data
is then consumed, transformed, and inserted into MongoDB via the
`MongoDB Sink connector
<https://www.mongodb.com/docs/kafka-connector/current/sink-connector/>`__,
establishing a seamless data flow between SQL, Kafka, and MongoDB. This
process ensures that ERP data remains continuously synchronized in
MongoDB, highlighting its reliability as a live source of crucial
business information.

Simultaneously, simulated MQTT data streams deliver real-time shop floor
data into the database, including machine status, quality outputs, and
sensor readings like temperature and vibration. MongoDB's robust support
for real-time ingestion allows this data to be immediately available,
facilitating up-to-date machine monitoring and quicker response times.

`Change streams
<https://www.mongodb.com/resources/products/capabilities/change-streams>`__
are pivotal, enabling real-time data updates across systems. For
instance, when a work order is updated in the ERP system, this change is
instantly reflected downstream in MES and shop floor views, showcasing
MongoDB's capability for bi-directional data flows and live
synchronization within a unified data model.

Additionally, the demo highlights the importance of data
contextualization and enrichment. As data enters the UNS, MongoDB
enriches it with metadata such as machine ID, operator name, and
location following the ISA95 structure. This enriched model supports
fine-grained analysis and filtering, essential for generating
actionable, cross-functional insights across manufacturing, operations,
and business teams.

The Leafy Factory demo validates MongoDB's technical strengths—including
real-time processing, flexible data modeling, and scalable
architecture—and demonstrates how these capabilities coalesce to support
a robust, dynamic, and future-ready Unified Namespace for smart
manufacturing.

Building the Solution
---------------------

.. procedure::
   :style: normal

   .. step:: `Set Up MongoDB Atlas Environment <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-1-create-a-mongodb-atlas-instance>`__

      - Configure cluster, database and collections for machine
        failures, sensor data (raw and transformed), ML models,
        maintenance history, and repair documentation.
      
      - Set up MongoDB Atlas Search and Vector search indexes for repair
        manuals and maintenance history.
      
        .. code-block:: javascript  
           :copyable: true  
  
           {  
               "fields": [  
                   {  
                       "numDimensions": 1024,  
                       "path": "embeddings",  
                       "similarity": "euclidean",  
                       "type": "vector"  
                   }  
               ]  
           }  

      - Configure Stream Processing for real-time data transformation. 
      
      - Create Atlas Charts dashboards for monitoring and visualization.


   .. step:: `Configure AI Services Integration <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-2-configure-environment-variables>`__

      - Select one LLM provider for your implementation:

        - Option 1 - Amazon Bedrock: Configure access to Cohere models
          for embeddings and completions (Examples of available models:
          cohere.embed-english-v3 for embeddings, cohere.command-r-10
          for completions).

        - Option 2 - OpenAI: Set up API access and select appropriate
          model.

      - Set up Google Cloud Translation API for multilingual support.

   .. step:: `Application Setup <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-3-add-some-documents-in-mongodb>`__

      - Configure environment variables including MongoDB connection
        strings, database settings, and required API credentials.
      
      - Deploy inference script for continuous system monitoring.

      - Install and configure alerts application.

      - Launch main demo application.

      - Perform system testing and validation to ensure proper data flow
        and functionality.

For complete implementation details, including code samples,
configuration files, and tutorial videos, visit the `GitHub repository
<https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance>`__.
This repository provides a production-ready template for implementing
predictive maintenance using MongoDB Atlas' comprehensive feature set.

Key Learnings 
-------------

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__ provides a unified
  platform for predictive maintenance by
  combining structured sensor data and unstructured maintenance documents,
  enabling both real-time monitoring and AI-powered analysis through a
  single-view architecture. 

- The solution leverages a four-stage approach (prioritization,
  prediction, plan generation, guidance delivery) that integrates multiple
  MongoDB features including Atlas Stream Processing for real-time data,
  Vector Search for semantic analysis, and Change Streams for mobile
  alerts. 

- Organizations can achieve significant operational improvements
  through this approach: 15-20% reduction in downtime, 5-20% increase in
  labor productivity, and 30-60% reduction in maintenance costs. 
  
- The implementation combines multiple AI technologies (`RAG
  <https://www.mongodb.com/resources/basics/artificial-intelligence/retrieval-augmented-generation>`__,
  `LLMs
  <https://www.mongodb.com/resources/basics/artificial-intelligence/large-language-models>`__,
  `ML models <https://www.mongodb.com/resources/basics/machine-learning>`__)
  with MongoDB's developer data platform capabilities to create an
  automated maintenance workflow—from machine prioritization to mobile
  repair guidance delivery.

Technologies and Products Used
------------------------------

MongoDB Developer Data Platform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__
- `Atlas Charts <https://www.mongodb.com/products/platform/atlas-charts>`__
- `Atlas Stream Processing <https://www.mongodb.com/products/platform/atlas-stream-processing>`__ 
- `Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

Partner Technologies
~~~~~~~~~~~~~~~~~~~~

- `Amazon Bedrock <https://cloud.mongodb.com/ecosystem/amazon-bedrock>`__
- `Google Cloud <https://cloud.google.com/>`__

Authors
-------

- Raphael Schor, MongoDB
- Romina Carranza, MongoDB
- Giovanni Rodriguez, MongoDB