.. _arch-center-is-unified-namespace:

================================
Unified Namespace Data Integrity
================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: unified namespace, manufacturing, modernization, odl, IoT
   :description: Explore manufacturing efficiency with a Unified
                 Namespace solution for seamless data integration and real-time
                 insights. Discover how to enhance your operations.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB aids manufacturers by unifying operational data, enhancing
production efficiency, enabling real-time insights, and optimizing
processes.

**Use cases:** `App-Driven Analytics
<https://www.mongodb.com/resources/solutions/use-cases/application-driven-intelligence>`__,
`IoT <https://www.mongodb.com/solutions/use-cases/internet-of-things>`__,
`Single View <https://www.mongodb.com/solutions/use-cases/single-view>`__

**Industries:** `Manufacturing & Mobility
<https://www.mongodb.com/solutions/industries/manufacturing>`__

**Products:** `Atlas Database
<https://www.mongodb.com/products/platform/atlas-database>`__, `Atlas
Charts <https://www.mongodb.com/products/platform/atlas-charts>`__,
`Change Streams
<https://www.mongodb.com/resources/products/capabilities/change-streams>`__,
`MongoDB Time Series
<https://www.mongodb.com/products/capabilities/time-series>`__

**Partners:** `Cedalo (Mosquitto)
<https://cedalo.com/blog/mqtt-to-mongodb-integration/>`__, `Kafka
Connector
<https://www.mongodb.com/products/integrations/kafka-connector>`__ 

Solution Overview
-----------------

Manufacturing is experiencing a profound transformation through the
integration of real-time data and centralized data management tools like
the Unified Namespace (UNS) model. Modern factories generate vast
amounts of data from various systems like enterprise resource planning
(ERP), manufacturing execution system (MES), and shop floor machines. As
manufacturers move towards connected and automated systems, unifying
these data sources is crucial. `Deloitte reports
<https://www2.deloitte.com/us/en/insights/industry/manufacturing/manufacturing-industry-outlook.html>`__
that smart factory initiatives can boost productivity by up to 12% and
improve equipment effectiveness by up to 20%. Achieving these gains
requires an effective data management strategy, one that leverages UNS
models supported by robust solutions like MongoDB.

The unified approach facilitates real-time data visibility and seamless
integration, helping to optimize processes and enhance operational
efficiency. By breaking down traditional hierarchical data flows,
manufacturers can leverage both historical and real-time insights for
strategic planning and continuous improvements.

An effective UNS system proactively integrates and contextualizes data,
taking steps to achieve organizational objectives without needing
constant human intervention. Rather than merely reporting isolated data
points, a UNS using MongoDB can autonomously unify and analyze data from
diverse manufacturing systems, uncover critical insights, and facilitate
informed decision-making.

In this solution, we develop a comprehensive Unified Namespace framework
using MongoDBâ€™s capabilities for flexible data modeling, real-time
processing, and scalability.

The setup ingests various operational data types, analyzes streams for
actionable insights, stores the information in MongoDB, and provides
strategic recommendations based on comprehensive analytics with data
from different sources and types.

Reference Architectures
-----------------------

Machine Prioritization Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture leverages RAG (retrieval-augmented generation) to
determine which machines require predictive maintenance. The system
processes two types of input data: 

- Structured data: Production parameters and machine breakdown frequency. 
- Unstructured data: Institutional knowledge in documents. 

The workflow aggregates and operationalizes both data types as vector
embeddings in MongoDB Atlas. Using Vector Search, it performs semantic
search to provide relevant context to an LLM (via Amazon Bedrock or Cohere
in this case), which generates contextual responses to prioritization
queries. This helps maintenance teams make data-driven decisions about
which machines need attention first.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-system-diagram.svg
   :figwidth: 1200px
   :alt: AI system diagram to prioritize machine maintenance
   
   Figure 2. AI system diagram for machine prioritization recommendations

Sensor Data Processing Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This real-time architecture processes machine sensor data through six
key stages: 

1. Data collection: A prioritized milling machine with DAQ
   (data acquisition) captures critical metrics (product type, temperature,
   speed, torque, tool wear). 
#. Stream processing: Real-time transformation of
   raw sensor data. 
#. Data storage: Centralized storage in MongoDB Atlas with
   single view capability. 
#. Change detection: Monitoring for significant data
   changes. 
#. ML inference: Running trained models to predict potential
   failures. 
#. Dual output: Visualization through Atlas Charts and mobile
   notifications via Change Streams.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-real-time-sensor.svg
   :figwidth: 1200px
   :alt: Real-time sensor monitoring diagram
   
   Figure 3. Real-time sensor monitoring with MongoDB Atlas

Work Order Generation Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture automates maintenance work order creation through:

1. Document processing: Machine manuals and old work orders are chunked
   and converted to vectors using AWS/Cohere embedding models. 

#. Vector storage: Embeddings stored in MongoDB Atlas. 

#. Work order generation: A specialized app that: 

   - Uses LLMs to generate appropriate work order templates. 
   - Pulls inventory and resource information through aggregation. 
   - Creates detailed repair plans based on machine documentation.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-work-order.svg
   :figwidth: 1200px
   :alt: Work order generator diagram with artificial intelligence
   
   Figure 4. AI-powered work order generation system diagram

Maintenance Guidance Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture enhances operator instructions through a RAG approach:

1. Service note processing: Converts multilingual PDF service notes to text.
#. Translation: Processes non-English content (Spanish in this case)
   through translation models. 
#. Instruction generation: Combines translated service notes with
   original repair plans using LLMs.
#. Delivery: Provides updated maintenance instructions to technicians
   through a mobile app.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-rag.svg
   :figwidth: 1200px
   :alt: RAG workflow diagram
   
   Figure 5. RAG workflow enhances technician repair instructions

Each architecture integrates with MongoDB Atlas core capabilities while
leveraging external services (Amazon Bedrock, OpenAI, Cohere) for AI/ML
functionality, creating a comprehensive predictive maintenance solution.

Building the Solution
---------------------

.. procedure::
   :style: normal

   .. step:: `Set Up MongoDB Atlas Environment <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-1-create-a-mongodb-atlas-instance>`__

      - Configure cluster, database and collections for machine
        failures, sensor data (raw and transformed), ML models,
        maintenance history, and repair documentation.
      
      - Set up MongoDB Atlas Search and Vector search indexes for repair
        manuals and maintenance history.
      
        .. code-block:: javascript  
           :copyable: true  
  
           {  
               "fields": [  
                   {  
                       "numDimensions": 1024,  
                       "path": "embeddings",  
                       "similarity": "euclidean",  
                       "type": "vector"  
                   }  
               ]  
           }  

      - Configure Stream Processing for real-time data transformation. 
      
      - Create Atlas Charts dashboards for monitoring and visualization.


   .. step:: `Configure AI Services Integration <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-2-configure-environment-variables>`__

      - Select one LLM provider for your implementation:

        - Option 1 - Amazon Bedrock: Configure access to Cohere models
          for embeddings and completions (Examples of available models:
          cohere.embed-english-v3 for embeddings, cohere.command-r-10
          for completions).

        - Option 2 - OpenAI: Set up API access and select appropriate
          model.

      - Set up Google Cloud Translation API for multilingual support.

   .. step:: `Application Setup <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-3-add-some-documents-in-mongodb>`__

      - Configure environment variables including MongoDB connection
        strings, database settings, and required API credentials.
      
      - Deploy inference script for continuous system monitoring.

      - Install and configure alerts application.

      - Launch main demo application.

      - Perform system testing and validation to ensure proper data flow
        and functionality.

For complete implementation details, including code samples,
configuration files, and tutorial videos, visit the `GitHub repository
<https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance>`__.
This repository provides a production-ready template for implementing
predictive maintenance using MongoDB Atlas' comprehensive feature set.

Key Learnings 
-------------

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__ provides a unified
  platform for predictive maintenance by
  combining structured sensor data and unstructured maintenance documents,
  enabling both real-time monitoring and AI-powered analysis through a
  single-view architecture. 

- The solution leverages a four-stage approach (prioritization,
  prediction, plan generation, guidance delivery) that integrates multiple
  MongoDB features including Atlas Stream Processing for real-time data,
  Vector Search for semantic analysis, and Change Streams for mobile
  alerts. 

- Organizations can achieve significant operational improvements
  through this approach: 15-20% reduction in downtime, 5-20% increase in
  labor productivity, and 30-60% reduction in maintenance costs. 
  
- The implementation combines multiple AI technologies (`RAG
  <https://www.mongodb.com/resources/basics/artificial-intelligence/retrieval-augmented-generation>`__,
  `LLMs
  <https://www.mongodb.com/resources/basics/artificial-intelligence/large-language-models>`__,
  `ML models <https://www.mongodb.com/resources/basics/machine-learning>`__)
  with MongoDB's developer data platform capabilities to create an
  automated maintenance workflowâ€”from machine prioritization to mobile
  repair guidance delivery.

Technologies and Products Used
------------------------------

MongoDB Developer Data Platform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__
- `Atlas Charts <https://www.mongodb.com/products/platform/atlas-charts>`__
- `Atlas Stream Processing <https://www.mongodb.com/products/platform/atlas-stream-processing>`__ 
- `Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

Partner Technologies
~~~~~~~~~~~~~~~~~~~~

- `Amazon Bedrock <https://cloud.mongodb.com/ecosystem/amazon-bedrock>`__
- `Google Cloud <https://cloud.google.com/>`__

Authors
-------

- Raphael Schor, MongoDB
- Romina Carranza, MongoDB
- Giovanni Rodriguez, MongoDB