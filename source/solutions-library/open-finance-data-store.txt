======================================
MongoDB as the Open Finance Data Store
======================================

.. meta:: 
   :keywords: Open Finance, Financial Services, Atlas, Data Integration, Real-Time Analytics, Aggregation Pipeline, Secure Data Management, PSD2 Compliance, Personalized Financial Insights
   :description: MongoDB powers open finance with flexible data integration, built-in security, and scalability—enabling seamless, compliant, and personalized financial services.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB powers open finance with flexible data integration, built-in
security, and scalability—enabling seamless, compliant, and personalized
financial services.

- **Use cases:** `App Driven-Analytics <https://www.mongodb.com/collateral/application-driven-analytics>`__

- **Industries:** `Financial Services <https://www.mongodb.com/industries/financial-services>`__

- **Products and tools:** `Aggregation pipeline <https://www.mongodb.com/docs/manual/core/aggregation-pipeline/>`__, 
  `MongoDB Atlas <https://www.mongodb.com/atlas/database>`__

Solution Overview
------------------

Open finance is transforming the financial industry, enabling seamless data sharing across
banks, fintech companies, and third-party providers. However, integrating diverse
financial data while ensuring security, compliance, and scalability is a major challenge.

MongoDB provides the ideal foundation for open finance with its flexible document model,
native `JSON <https://www.mongodb.com/resources/languages/what-is-json>`__ support, and
powerful aggregation framework—allowing institutions to unify data from multiple sources
effortlessly. With built-in encryption, fine-grained access controls, and high
availability, MongoDB ensures secure and compliant data management.

By leveraging MongoDB, financial institutions can accelerate innovation, offer
personalized financial insights, and seamlessly adapt to evolving regulations—all without
the complexity of traditional relational databases.

.. figure:: /includes/images/industry-solutions/open-finance.gif
  :alt: Open Finance demo in gif format

  Figure 1. Open finance application with MongoDB

Reference Architectures
-----------------------

At the center of this architecture is our fictional demo bank, Leafy Bank, which allows
users to connect external bank accounts securely.

First, the user initiates a request to connect their external bank accounts. This requires
explicit user consent, ensuring security and compliance with regulations like PSD2. To
authenticate, Leafy Bank emulates {+oauth2+}, generating Bearer tokens for secure
communication between institutions.

Once authorized, Leafy Bank communicates with external banks—like Green Bank or MongoDB
Bank—via APIs. These banks expose financial data such as accounts, transactions, and
balances through their microservices. The response is returned in |json| format, ensuring
compatibility and seamless data exchange.

The retrieved financial data is then pushed into |service-fullname|, where it is centrally
stored. MongoDB’s flexible document model makes it easy to handle diverse data structures
from different banks. From here, Leafy Bank can leverage MongoDB Aggregation Pipelines to
analyze and enrich the data, giving users a holistic financial view while enabling the
bank to offer personalized financial insights.

.. figure:: /includes/images/industry-solutions/open-finance-architecture.svg
   :width: 750px
   :alt: Open Finance architecture diagram

   Figure 2. Open finance architecture diagram
  

Data Model Approach
-------------------

In the demo solution for open finance using MongoDB as the central data store, the data
model is a simplified design that emulates real-world financial data integration. The
approach leverages MongoDB's flexible document model to handle diverse data structures
from different financial entities. Here’s a detailed description of the data model
approach:

Simplified Components for Demonstration Purposes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Tokens collection:** 
  
  - **Purpose**: Stores Bearer tokens used for authenticating and authorizing API requests
    between Leafy Bank and external banks. 
  
  - **Structure**:
  
    .. code-block:: json
        
        {
        "_id": { "$oid": "unique_id" }, 
        "UserName": "string", 
        "BearerToken": "string",
        "TokenDates": {
            "CreationDate": { "$date": "ISODate" }, 
            "LastUseDate": { "$date": "ISODate" }
          },
        }
    
  - **Simplification**: In a real-world scenario, token management would involve more
    complex mechanisms, including token expiration, refresh tokens, and secure storage
    practices.

- **External accounts collection:** 

  - **Purpose**: Stores information about external bank accounts linked by users. 
  
  - **Structure**:
  
    .. code-block:: json
        
        {
        "_id": { "$oid": "unique_id" }, 
        "AccountId": "string", 
        "AccountBank": "string",
        "AccountStatus": "string", 
        "AccountType": "string", 
        "AccountBalance": "number",
        "AccountCurrency": "string", 
        "AccountDate": {
            "OpeningDate": { "$date": "ISODate" }
        }, 
        "AccountUser": {
            "UserName": "string", 
            "UserId": { "$oid": "unique_id" }
        }, "GreenAccountNarrative": "string"
        }
  
  - **Simplification**: Real-world account data would include more detailed information
    such as transaction history, account limits, and additional metadata for compliance
    and auditing.

- **External products collection:** 

  - **Purpose**: Stores information about financial products (e.g., loans and mortgages)
    associated with users. 

  - **Structure**:
    
    .. code-block:: json
        
        {
        "_id": { "$oid": "unique_id" }, 
        "ProductId": "string", 
        "ProductBank": "string",
        "ProductStatus": "string", 
        "ProductType": "string", 
        "ProductAmount": "number",
        "ProductCurrency": "string", 
        "ProductInterestRate": "number", 
        "ProductDate": {
            "OpeningDate": { "$date": "ISODate" }
        }, 
        "ProductCustomer": {
            "UserName": "string", 
            "UserId": { "$oid": "unique_id" }
        }, 
        "GreenProductNarrative": "string", 
        "RepaymentPeriod": "number", 
        "LoanCollateral": "string"
        }

  - **Simplification**: In a real-world scenario, product data would be more
    comprehensive, including detailed terms and conditions, repayment schedules, and
    collateral details.
  - **Real-world scenario considerations**

In a real-world implementation, each financial entity would have its own data model
definitions, which could vary significantly. The following considerations would be
essential:

- **Data mapping and relationships**: 
  
  Implementing a robust data mapping and
  relationship layer to translate diverse data models from different financial entities
  into a unified format.

- **Security and compliance**: 
  
  Ensuring data security and compliance with regulations
  such as GDPR, PSD2, and other local financial regulations. This includes encryption,
  access controls, and audit trails.

- **Scalability and performance**: 
  
  Designing the data model to handle large volumes of
  data efficiently, with considerations for indexing, sharding, and performance
  optimization.

- **Integration and interoperability**: 
  
  Building APIs and microservices that can
  seamlessly integrate with various external systems, ensuring interoperability and
  real-time data exchange.

By using MongoDB's flexible document model, the demo solution effectively showcases how
financial institutions can unify and manage diverse data sources. However, a
production-grade implementation would require addressing the complexities and nuances of
real-world financial data integration.

Building the Solution
---------------------
For detailed setup instructions you can follow the steps outlined in our `public GitHub
repository
<https://github.com/mongodb-industry-solutions/leafy-bank-backend-openfinance>`__. This
repository hosts the backend for Leafy Bank's open finance demo service. It demonstrates
integration with third-party banks and showcases secure data exchange. MongoDB serves as
the central data store. This code may include simplified or emulated components for
demonstration purposes.

How to build the solution step-by-step:

.. procedure::
   :style: normal

   .. step:: Set up MongoDB database and collections

      Create a new database in |service-fullname| named **open_finance**, then add three collections:
      **tokens**, **external_accounts**, and **external_products**. Import the provided sample
      data.

   .. step:: Add MongoDB user

      Create a new user with **readWrite** access to the **open_finance** database to manage
      data securely.

   .. step:: Configure environment variables

      Add the necessary database credentials and API origins to a **.env** file for seamless
      connectivity.

   .. step:: Run it locally

      Set up a virtual environment using Poetry, install
      dependencies, and start the backend with uvicorn. Ensure the service runs on the correct
      port for API communication.

Frontend for This Solution
~~~~~~~~~~~~~~~~~~~~~~~~~~

The frontend for this solution is available in the `Leafy Bank UI repository
<https://github.com/mongodb-industry-solutions/leafy-bank-ui>`__. The different components
of Leafy Bank are designed as microservices, with the UI repository serving as the main
hub, providing an overview of all integrated services.

Key Learnings
-------------
- MongoDB can serve as the backbone of an open finance ecosystem by acting as a flexible
  and efficient central `data store
  <https://www.mongodb.com/resources/basics/data-stores>`__.
- With built-in encryption, access controls, and high availability, MongoDB ensures secure
  data management while meeting evolving regulatory requirements.

Technologies and Products Used
------------------------------

MongoDB Developer Data Platform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `MongoDB Atlas <https://www.mongodb.com/atlas/database>`__
- `Aggregation Pipeline <https://www.mongodb.com/docs/manual/core/aggregation-pipeline/>`__

Authors
-------
- Luis Pazmino Diaz, MongoDB
- Ainhoa Mugica, MongoDB
- Julian Boronat, MongoDB
- Andrea Alaman Calderon, MongoDB