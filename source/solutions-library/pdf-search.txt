.. _arch-center-is-pdf-search:

==========================================================
Build a PDF Search Application with Vector Search and LLMs
==========================================================

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :keywords: pdf, vector search
   :description: Streamline operations and claims processing with powerful PDF search capabilities

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Streamline operations and claims processing with powerful PDF search
capabilities by integrating MongoDB Atlas Vector Search,
Superduper.io, and LLMs.

**Use cases:** `Gen AI
<https://www.mongodb.com/use-cases/artificial-intelligence>`__

**Industries:** `Insurance
<https://www.mongodb.com/industries/insurance>`__,
`Financial Services
<https://www.mongodb.com/industries/financial-services>`__,
`Manufacturing and Mobility
<https://www.mongodb.com/industries/manufacturing>`__,
`Retail <https://www.mongodb.com/industries/retail>`__

**Products:** `Atlas <http://mongodb.com/atlas>`__, `Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__

**Partners:** `Superduper.io <http://superduper.io/>`__, `OpenAI
<https://www.mongodb.com/developer/products/atlas/using-openai-latest-embeddings-rag-system-mongodb>`__,
`FastAPI <https://www.mongodb.com/developer/technologies/fastapi>`__

Solution Overview
-----------------

`Retrieval-augmented generation
<https://www.mongodb.com/resources/basics/retrieval-augmented-generation>`__
(RAG) applications are a game changer for insurance companies, enabling
them to harness the power of unstructured data while promoting
accessibility and flexibility. Special attention goes to PDFs, which are
ubiquitous yet difficult to search, leading claim adjusters and
underwriters to spend hours reviewing contracts, claims, and guidelines
in this common format. RAG for PDF search brings efficiency and accuracy
to this historically cumbersome task. Now, users can simply type a
question in natural language and the app will sift through the company
data, provide an answer, summarize the content of the documents, and
indicate the source of the information, including the page and paragraph
where it was found.

In this `GitHub repo
<https://github.com/mongodb-industry-solutions/Insurance-PDF-Search/tree/main>`__,
you will find detailed, step-by-step instructions on how to build the
PDF search application combining MongoDB, Superduper, and LLMs. Our use
case for this solution focuses on a claim adjuster or an underwriter
handling a specific case. Analyzing the guidelines PDF associated with a
specific customer helps determine the loss amount in the event of an
accident or the new premium in the case of a policy renewal. The app
assists by answering questions and displaying the relevant sections of
the document.

Insurance firms rely heavily on data processing. To make investment
decisions or handle claims, they leverage vast amounts of data, mostly
unstructured. Underwriters and claim adjusters need to comb through
numerous pages of guidelines, contracts, and reports, typically in PDF
format. Manually finding and reviewing every piece of information is
time-consuming and can easily lead to expensive mistakes, such as
incorrect risk estimations. Quickly finding and accessing relevant
content is essential. Combining `Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__ and
`LLMs
<https://www.mongodb.com/resources/basics/large-language-models>`__ to
build RAG apps can directly impact the bottom line of an insurance
company. Visit the `Atlas Vector Search Quick Start guide
<https://www.mongodb.com/docs/atlas/atlas-vector-search/tutorials/vector-search-quick-start/?tck=ai_as_web>`__
to try our semantic search tool now.

.. video:: https://youtu.be/_w9okXmzTJw

Building the Solution and Reference Architecture
------------------------------------------------

Combining MongoDB and Superduper allows you to build an information
retrieval system with ease. Let's break down the process:

#. The user adds the PDFs that need to be searched.
    
#. A script scans the PDFs, creates the chunks, and vectorizes them (see
   Figure 1). The chunking step is carried out using a sliding window
   methodology, which ensures that potentially important transitional
   data between chunks is not lost, helping to preserve continuity of
   context.

#. Vectors and chunk metadata are stored in MongoDB, and a
   `Vector Search
   <https://www.mongodb.com/products/platform/atlas-vector-search>`__
   index is created (see Figure 2).
   
#. The PDFs are now ready to be queried. The user selects a customer,
   asks a question, and the system returns an answer, displaying the
   page and paragraph where the information was found and highlighting
   the specific section with a red frame (see Figure 2).

.. figure:: /includes/images/industry-solutions/is-pdf-search-fig1.svg
   :figwidth: 1200px
   :alt: Figure 1: PDF chunking, embedding creation, and storage, orchestrated with Superduper.io

   Figure 1. PDF chunking, embedding creation, and storage, orchestrated with Superduper.io

Each customer has a guidelines PDF associated with their account based
on country of residency. When the user selects a customer and asks a
question, the system runs a vector search query only on that particular
document, seamlessly filtering out the non-relevant ones. This is made
possible by the `pre-filtering
<https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/#atlas-vector-search-pre-filter>`__
(see code snippets below) field included in the index and in the search
query. 

Atlas Vector Search also takes advantage of MongoDB's new `Search Nodes
<https://www.mongodb.com/blog/post/search-nodes-now-public-preview-performance-scale-dedicated-infrastructure>`__
dedicated architecture, enabling better optimization for the right level
of resourcing for specific workload needs. Search Nodes provide
dedicated infrastructure for `Atlas Search
<https://www.mongodb.com/products/platform/atlas-search>`__ and Vector
Search workloads, allowing you to optimize compute resources and fully
scale search needs independent of the database. Search Nodes provide
better performance at scale, delivering workload isolation, higher
availability, and the ability to better optimize resource usage.

.. figure:: /includes/images/industry-solutions/is-pdf-search-fig2.svg
   :figwidth: 1200px
   :alt: Figure 2: PDF querying flow, orchestrated with Superduper.io

   Figure 2. PDF querying flow, orchestrated with Superduper.io

.. code-block:: javascript

   {
      "fields": [
         {
            "numDimensions": 1536,
            "path": "_outputs.elements.text-embedding-ada-002.0",
            "similarity": "cosine",
            "type": "vector"
         },
         {
            "path": "_outputs.elements.chunk.0.source_elements.metadata.filename",
            "type": "filter"
         }
      ]
   }

.. code-block:: javascript

   vector_query = [
      {
         "$vectorSearch": {  
            'index': INDEX_NAME,
            'path': "_outputs.elements.text-embedding-ada-002.0",
            'queryVector': query_embedding,
            'numCandidates': vector_search_top_k,
            'limit': vector_search_top_k,
            'filter': {'_outputs.elements.chunk.0.source_elements.metadata.filename': filename}
         }
      },
      {
         "$project": {
            "_outputs.elements.text-embedding-ada-002.0": 0,
            "score": { "$meta": "vectorSearchScore" }
         }
      }
    ]

Superduper.io
-------------

`Superduper.io <https://www.superduper.io/>`__ is an open-source Python
framework for integrating AI models and workflows directly with and
across major databases for more flexible and scalable custom enterprise
AI solutions. It enables developers to build, deploy, and manage AI on
their existing data infrastructure and data, while using their preferred
tools, eliminating data migration and duplication.

**With Superduper.io, developers can:**

- Bring AI to their databases, eliminating data pipelines and moving
  data, minimizing engineering efforts, time to production, and
  computation resources.

- Implement AI workflows with any open- and closed-source AI models and
  APIs, on any type of data, with any AI and Python framework, package,
  class, or function.

- Safeguard data by switching from APIs to hosting and fine-tuning your
  own models, on your own and existing infrastructure, whether
  on-premises or in the cloud.

- Easily switch between embedding models and LLMs to other API providers
  as well as hosting your own models on HuggingFace or elsewhere just by
  changing a small configuration.

Superduper.io provides an array of sample use cases and notebooks that
developers can use to get started, including vector search with MongoDB,
embedding generation, multimodal search, RAG, transfer learning, and
many more. The demo showcased in this solution is adapted from an `app
previously developed <https://github.com/SuperDuperDB/poc-volvo>`__ by
Superduper.io. 

Key Learnings
-------------

- Build the solution following the instructions in this `Github repo
  <https://github.com/mongodb-industry-solutions/Insurance-PDF-Search/tree/main>`__.
  It is important to note that the solution is made of two logical
  steps:

  - The initialization script breaks down the PDFs into chunks and then
    turns them into vector embeddings.
  - The querying step allows the user to interrogate the documents.

- Text embedding creation: The embedding generation process can be
  carried out using different models and deployment options. It is
  always important to be mindful of privacy and data protection
  requirements. A locally deployed model is recommended if you need your
  data to remain on the servers. Otherwise, you can simply call an API
  and get your vector embeddings back, as explained in `this tutorial
  <https://www.mongodb.com/developer/products/atlas/semantic-search-mongodb-atlas-vector-search/>`__
  that tells you how to do it with OpenAI.

- Superduper is the framework that helps us with the plumbing of the
  moving pieces, providing a simple and standard interface to interact
  with Vector Search and LLMs.

Technologies and Products Used
------------------------------

MongoDB Developer Data Platform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__
- `MongoDB Atlas Vector Search
  <https://www.mongodb.com/products/platform/atlas-vector-search>`__
- `Atlas Collections <https://www.mongodb.com/docs/manual/core/databases-and-collections/>`__
- `Atlas Clusters <https://www.mongodb.com/resources/products/fundamentals/clusters>`__

Partner Technologies
~~~~~~~~~~~~~~~~~~~~

- `Superduper.io <https://www.superduper.io/>`__
- `OpenAI <https://www.mongodb.com/developer/products/atlas/using-openai-latest-embeddings-rag-system-mongodb>`__
- `FastAPI <https://www.mongodb.com/developer/technologies/fastapi>`__

Authors
-------

- Luca Napoli, Industry Solutions, MongoDB
- Clarence Ondieki, Solutions Architect, MongoDB
- Pedro Bereilh, Industry Solutions, MongoDB
