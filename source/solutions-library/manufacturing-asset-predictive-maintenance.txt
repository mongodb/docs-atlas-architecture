.. _arch-center-is-predictive-maintenance:

====================================================
Predictive Maintenance Excellence with MongoDB Atlas
====================================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: predictive maintenance, manufacturing, gen AI 
   :description: Read how MongoDB Atlas powers predictive maintenance
   with AI/ML, real-time equipment monitoring, failure prediction, and
   automated repair plan generation.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Transform equipment maintenance with AI-powered analytics that help
predict failures, generate repair plans, and reduce downtime.

**Use cases:** `App-Driven Analytics
<https://www.mongodb.com/resources/solutions/use-cases/application-driven-intelligence>`__,
`Gen AI <https://www.mongodb.com/use-cases/artificial-intelligence>`__,
`IoT <https://www.mongodb.com/solutions/use-cases/internet-of-things>`__,
`Single View <https://www.mongodb.com/solutions/use-cases/single-view>`__

**Industries:** `Manufacturing & Mobility
<https://www.mongodb.com/solutions/industries/manufacturing>`__,
Aerospace & Defense, Energy & Environmental

**Products:** `MongoDB Atlas <http://mongodb.com/atlas>`__, `Atlas
Charts <https://www.mongodb.com/products/platform/atlas-charts>`__,
`Atlas Stream Processing
<https://www.mongodb.com/products/platform/atlas-stream-processing>`__,
`Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__

**Partners:** `LangChain
<https://cloud.mongodb.com/ecosystem/langchain>`__, `Cohere
<https://cloud.mongodb.com/ecosystem/cohere>`__

Solution Overview
-----------------

MongoDB Atlas powers an end-to-end predictive maintenance solution that
helps manufacturers prevent equipment failures and optimize maintenance
operations through four strategic stages:

1. Machine prioritization and criticality analysis

   - Addresses the question: "Which machine should I prioritize for
     predictive maintenance and why?" 
   - Uses machine learning and RAG-based analysis to prioritize critical
     equipment.
   - Leverages historical data and expert knowledge to make informed
     decisions.

2. Failure prediction

   - Answers the critical question: "What is the root cause of imminent
     failure?"
   - Processes real-time sensor data through `Atlas Stream Processing
     <https://www.mongodb.com/products/platform/atlas-stream-processing>`__
   - Enables early detection of potential failures before they occur.

3. Maintenance plan generation

   - Focuses on: "How should I schedule the repair procedure?" 
   - Automatically generates detailed repair plans using large language
     models. 
   - Combines maintenance manuals, inventory data, and resource
     information.

4. Maintenance guidance generation

   - Addresses: "How do I get better guidance on fixing machines?" 
   - Provides enhanced maintenance guidance by integrating service notes
     and repair instructions. 
   - Delivers instructions directly to technicians' mobile devices
     through `Change Streams
     <https://www.mongodb.com/docs/manual/changeStreams/>`__.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-demo.svg
   :figwidth: 1200px
   :alt: Predictive maintenance workflow stages
   
   Figure 1: Four stages of predictive maintenance workflow

.. video:: https://www.youtube.com/watch?v=YwTWpUl3QS8

By leveraging MongoDB's unified data platform capabilities like vector
search and real-time analytics, organizations can achieve significant
operational improvements: `reducing downtime by 15-20%, increasing labor
productivity by 5-20%, and cutting maintenance costs by 30-60%
<https://www2.deloitte.com/content/dam/Deloitte/us/Documents/process-and-operations/us-predictive-maintenance.pdf>`__.

Reference Architectures
-----------------------

Machine Prioritization Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture leverages RAG (retrieval-augmented generation) to
determine which machines require predictive maintenance. The system
processes two types of input data: 

-Structured data: Production parameters and machine breakdown frequency 

-Unstructured data:Institutional knowledge in documents. 

The workflow aggregates and operationalizes both data types as vector
embeddings in MongoDB Atlas.Using Vector Search, it performs semantic
search to provide relevant context to an LLM (via AWS Bedrock or Cohere
in this case), which generates contextual responses to prioritization
queries. This helps maintenance teams make data-driven decisions about
which machines need attention first.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-system-diagram.svg
   :figwidth: 1200px
   :alt: AI system diagram to prioritize machine maintenance
   
   Figure 2. AI system diagram for machine prioritization recommendations

The journey starts on the left side of the diagram with the *User/Event*
label. A laptop icon represents the “Product Description Generator”
system. First, a new product is received, this can be added manually by
a user or in bulk through an automated event. 

Then, retailers generate the descriptions by sending a *query* to Together
AI’s endpoint, utilizing their vision models, combining computer vision
and natural language processing (NLP) to process and understand images
alongside text. The request includes the image URL, the desired
description length, the vision model utilized, and the languages for the
description. 

Then, Together AI takes this data and uses one of its Llama3 vision
models to scan the image and generate a description that matches the
specified requirements, and returns the *product description* to the
application.

Finally, the product along with its description will be upserted inside
the catalog on MongoDB, ensuring real-time availability across all
connected systems.

To illustrate the scalability of this architecture, consider the diagram
below. By integrating `MongoDB Change Streams
<https://www.mongodb.com/docs/manual/changeStreams/>`__, it allows
real-time updates on any application listening to the catalog. For
example, the e-commerce portal, a social media platform, and any other
touchpoints.

.. figure:: /includes/images/industry-solutions/product-description-architecture-extended.svg
   :figwidth: 1200px
   :alt: Product description architecture diagram with real-time integration
   
   Figure 2. Product description generative AI architecture with real-time applications.

Building the Solution
---------------------

Building this solution can be broken down in five major steps:

.. procedure::
   :style: normal

   .. step:: Replicate the demo database

      Provision a cluster within your `Atlas account
      <https://www.mongodb.com/cloud/atlas/register>`__ and populate
      your database with the data required for the demo. You can quickly
      replicate the database using a data dump found in the `github
      repository
      <https://github.com/mongodb-industry-solutions/description-generator/tree/main/resources/dump/TogetherMDB>`__
      with a single `mongorestore
      <https://www.mongodb.com/docs/database-tools/mongorestore/>`__
      command.

   .. step:: Retrieve MongoDB Atlas connection string

      Navigate to your cluster and click on *Connect*. Copy the
      connection string provided and save it for your .env file.

   .. step:: Create your Together AI account

      Sign in to `Together AI <https://www.together.ai/>`__. Navigate to
      your account and retrieve your user key, which can be found inside
      your *Profile*, then go to *Settings* and select *API Keys*. Save this
      key, as you will need it in your .env file.

   .. step:: Create your object storage

      Create a new bucket in your AWS account and generate an IAM user
      with programmatic access. Save the access key and secret key for
      your .env file.

   .. step:: Configure your application’s frontend

      Obtain the demo code by cloning the GitHub repository to your
      local machine, configure the environment variables and install the
      dependencies. Finally, run the app locally at
      http://localhost:3003

For complete implementation details, including code samples,
configuration files, and tutorial videos, visit the `GitHub repository
<https://github.com/mongodb-industry-solutions/description-generator>`__.

Key Learnings
-------------

- **High-quality product descriptions drive business success:** A
  well-crafted product description enhances user engagement, improves
  SEO rankings with increased views, and helps customers make more
  informed purchase decisions. 

- **Leverage MongoDB and Together AI to automate product descriptions:**
  By combining MongoDB’s flexible and scalable database with Together
  AI’s available vision models, retailers are able to automate real-time
  product description generation that aligns with their business needs. 

- **Modern architectures speed up time to market:** Streamlining the 
  product onboarding process with AI and automation reduces manual
  effort and speeds up approvals. Using a generative AI for product
  descriptions maintains consistent UX and tone, enabling quick
  scalability for expanding product catalogs with little extra effort.

Together, these capabilities form a robust generative AI system that
scales with your business needs while ensuring efficiency and
reliability.

Technologies and Products Used
------------------------------

**MongoDB developer data platform:**

- `Atlas Database <https://www.mongodb.com/atlas/database>`__

**Partner technologies:**

-  `Together AI <https://www.together.ai/>`__.
-  `Next.js <https://nextjs.org/>`__.

Authors
-------

- Angie Guemes, MongoDB
- Prashant Juttukonda, MongoDB