.. _arch-center-is-car-assistant:

==============================================================
Transforming the Driver Experience with MongoDB & Google Cloud
==============================================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: car assistant, manufacturing, gen AI, automotive
   :description: Discover how MongoDB and Google Cloud are powering
                 generative AI-driven, hyper-personalized in-car experiences built for
                 automotive innovation at scale.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Learn how to create real-time, voice-driven automotive experiences using
MongoDB Atlas and the Google Cloud tool suite. Combine vehicle data,
user context, and car manual embeddings into a smart, scalable in-car
assistant that adapts to driver needs.

**Use cases:** `Gen AI
<https://www.mongodb.com/use-cases/artificial-intelligence>`__,
`Personalization
<https://www.mongodb.com/solutions/use-cases/personalization>`__

**Industries:** `Manufacturing & Mobility
<https://www.mongodb.com/solutions/industries/manufacturing>`__

**Products:** `MongoDB Atlas Database
<https://www.mongodb.com/products/platform/atlas-database>`__, `MongoDB
Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__

**Partners:** `Google Cloud <https://cloud.google.com/>`__, `PowerSync
<https://cloud.mongodb.com/ecosystem/powersync>`__ 

Solution Overview
-----------------

As automakers race to deliver next-generation driving experiences, they
face growing pressure to differentiate with intelligent, user-friendly
digital systems. In-car voice assistants have emerged as a key
opportunity—yet most still fall short, limited to basic commands like
setting navigation or controlling music. With the rise of generative AI,
there’s a clear path to move beyond these limitations and deliver truly
personalized, dynamic interactions behind the wheel.

This solution demonstrates how automotive teams can build a scalable,
real-time voice assistant powered by gen AI and backed by MongoDB Atlas.
The architecture integrates vehicle telemetry, user preferences, and car
manual embeddings to create an in-car assistant capable of adapting to
each driver’s needs. By using MongoDB Atlas’s flexible document model
and built-in vector search, developers can streamline data complexity
and deliver features faster for a better, more intuitive in-car
experience.

.. figure:: /includes/images/industry-solutions/car-assistant-demo.gif
   :figwidth: 1200px
   :alt: Predictive maintenance workflow stages
   
   Figure 1. Gen AI in-car assistant in action

Along the way, teams will learn how to: 

- Unify structured and unstructured data to augment the context of AI
  systems. 

- Enable real-time interactions with a scalable, cloud-native
  architecture. 

- Deliver personalized experiences with semantic search powered by Atlas
  Vector Search.

While this solution focuses on the automotive industry, its potential
extends far beyond. Industries like transportation, healthcare,
hospitality, and consumer electronics are exploring gen AI voice
interfaces to enhance customer engagement, reduce friction, and
streamline support. Whether it’s a smart home assistant, a digital
concierge, or an AI-enabled medical triage system, this architecture
provides a foundation to build voice-forward, data-driven experiences
that feel intuitive and relevant. Companies across industries are
harnessing `the power of voice with generative AI and MongoDB
<https://www.mongodb.com/blog/post/building-ai-mongodb-giving-your-apps-voice>`__
to transform user experiences.

Reference Architectures
-----------------------

Machine Prioritization Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture leverages RAG (retrieval-augmented generation) to
determine which machines require predictive maintenance. The system
processes two types of input data: 

- Structured data: Production parameters and machine breakdown frequency. 
- Unstructured data: Institutional knowledge in documents. 

The workflow aggregates and operationalizes both data types as vector
embeddings in MongoDB Atlas. Using Vector Search, it performs semantic
search to provide relevant context to an LLM (via Amazon Bedrock or Cohere
in this case), which generates contextual responses to prioritization
queries. This helps maintenance teams make data-driven decisions about
which machines need attention first.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-system-diagram.svg
   :figwidth: 1200px
   :alt: AI system diagram to prioritize machine maintenance
   
   Figure 2. AI system diagram for machine prioritization recommendations

Sensor Data Processing Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This real-time architecture processes machine sensor data through six
key stages: 

1. Data collection: A prioritized milling machine with DAQ
   (data acquisition) captures critical metrics (product type, temperature,
   speed, torque, tool wear). 
#. Stream processing: Real-time transformation of
   raw sensor data. 
#. Data storage: Centralized storage in MongoDB Atlas with
   single view capability. 
#. Change detection: Monitoring for significant data
   changes. 
#. ML inference: Running trained models to predict potential
   failures. 
#. Dual output: Visualization through Atlas Charts and mobile
   notifications via Change Streams.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-real-time-sensor.svg
   :figwidth: 1200px
   :alt: Real-time sensor monitoring diagram
   
   Figure 3. Real-time sensor monitoring with MongoDB Atlas

Work Order Generation Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture automates maintenance work order creation through:

1. Document processing: Machine manuals and old work orders are chunked
   and converted to vectors using AWS/Cohere embedding models. 

#. Vector storage: Embeddings stored in MongoDB Atlas. 

#. Work order generation: A specialized app that: 

   - Uses LLMs to generate appropriate work order templates. 
   - Pulls inventory and resource information through aggregation. 
   - Creates detailed repair plans based on machine documentation.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-work-order.svg
   :figwidth: 1200px
   :alt: Work order generator diagram with artificial intelligence
   
   Figure 4. AI-powered work order generation system diagram

Maintenance Guidance Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This architecture enhances operator instructions through a RAG approach:

1. Service note processing: Converts multilingual PDF service notes to text.
#. Translation: Processes non-English content (Spanish in this case)
   through translation models. 
#. Instruction generation: Combines translated service notes with
   original repair plans using LLMs.
#. Delivery: Provides updated maintenance instructions to technicians
   through a mobile app.

.. figure:: /includes/images/industry-solutions/predictive-maintenance-rag.svg
   :figwidth: 1200px
   :alt: RAG workflow diagram
   
   Figure 5. RAG workflow enhances technician repair instructions

Each architecture integrates with MongoDB Atlas core capabilities while
leveraging external services (Amazon Bedrock, OpenAI, Cohere) for AI/ML
functionality, creating a comprehensive predictive maintenance solution.

Building the Solution
---------------------

.. procedure::
   :style: normal

   .. step:: `Set Up MongoDB Atlas Environment <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-1-create-a-mongodb-atlas-instance>`__

      - Configure cluster, database and collections for machine
        failures, sensor data (raw and transformed), ML models,
        maintenance history, and repair documentation.
      
      - Set up MongoDB Atlas Search and Vector search indexes for repair
        manuals and maintenance history.
      
        .. code-block:: javascript  
           :copyable: true  
  
           {  
               "fields": [  
                   {  
                       "numDimensions": 1024,  
                       "path": "embeddings",  
                       "similarity": "euclidean",  
                       "type": "vector"  
                   }  
               ]  
           }  

      - Configure Stream Processing for real-time data transformation. 
      
      - Create Atlas Charts dashboards for monitoring and visualization.


   .. step:: `Configure AI Services Integration <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-2-configure-environment-variables>`__

      - Select one LLM provider for your implementation:

        - Option 1 - Amazon Bedrock: Configure access to Cohere models
          for embeddings and completions (Examples of available models:
          cohere.embed-english-v3 for embeddings, cohere.command-r-10
          for completions).

        - Option 2 - OpenAI: Set up API access and select appropriate
          model.

      - Set up Google Cloud Translation API for multilingual support.

   .. step:: `Application Setup <https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance?tab=readme-ov-file#step-3-add-some-documents-in-mongodb>`__

      - Configure environment variables including MongoDB connection
        strings, database settings, and required API credentials.
      
      - Deploy inference script for continuous system monitoring.

      - Install and configure alerts application.

      - Launch main demo application.

      - Perform system testing and validation to ensure proper data flow
        and functionality.

For complete implementation details, including code samples,
configuration files, and tutorial videos, visit the `GitHub repository
<https://github.com/mongodb-industry-solutions/Leafy-Predictive-Maintenance>`__.
This repository provides a production-ready template for implementing
predictive maintenance using MongoDB Atlas' comprehensive feature set.

Key Learnings 
-------------

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__ provides a unified
  platform for predictive maintenance by
  combining structured sensor data and unstructured maintenance documents,
  enabling both real-time monitoring and AI-powered analysis through a
  single-view architecture. 

- The solution leverages a four-stage approach (prioritization,
  prediction, plan generation, guidance delivery) that integrates multiple
  MongoDB features including Atlas Stream Processing for real-time data,
  Vector Search for semantic analysis, and Change Streams for mobile
  alerts. 

- Organizations can achieve significant operational improvements
  through this approach: 15-20% reduction in downtime, 5-20% increase in
  labor productivity, and 30-60% reduction in maintenance costs. 
  
- The implementation combines multiple AI technologies (`RAG
  <https://www.mongodb.com/resources/basics/artificial-intelligence/retrieval-augmented-generation>`__,
  `LLMs
  <https://www.mongodb.com/resources/basics/artificial-intelligence/large-language-models>`__,
  `ML models <https://www.mongodb.com/resources/basics/machine-learning>`__)
  with MongoDB's developer data platform capabilities to create an
  automated maintenance workflow—from machine prioritization to mobile
  repair guidance delivery.

Technologies and Products Used
------------------------------

MongoDB Developer Data Platform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `MongoDB Atlas <https://www.mongodb.com/atlas>`__
- `Atlas Charts <https://www.mongodb.com/products/platform/atlas-charts>`__
- `Atlas Stream Processing <https://www.mongodb.com/products/platform/atlas-stream-processing>`__ 
- `Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`__

Partner Technologies
~~~~~~~~~~~~~~~~~~~~

- `Amazon Bedrock <https://cloud.mongodb.com/ecosystem/amazon-bedrock>`__
- `Google Cloud <https://cloud.google.com/>`__

Authors
-------

- Dr. Humza Akhtar, MongoDB
- Rami Pinto, MongoDB