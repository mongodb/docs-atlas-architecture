.. _arch-center-is-digital-receipts:

===========================================
Real-Time Personalization with Receipt Data
===========================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: retail, personaliztion, ecommerce, single view, modernization
   :description: Discover how to turn receipt data into real-time insights that power personalized experiences.
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Make receipts a growth engine with the document model and AI insights
powered by MongoDB.

**Use cases:** `Modernization <https://www.mongodb.com/solutions/use-cases/modernize>`__, 
`Personalization <https://www.mongodb.com/solutions/use-cases/catalog>`__,
`Single View <https://www.mongodb.com/solutions/use-cases/single-view>`__ 

**Industries:** `Retail <https://www.mongodb.com/solutions/industries/retail>`__

**Products:** `MongoDB Atlas <http://mongodb.com/atlas>`__, 
`MongoDB Atlas Triggers <https://www.mongodb.com/docs/atlas/atlas-ui/triggers/>`__,
`MongoDB Atlas Vector Search <https://www.mongodb.com/products/platform/atlas-vector-search>`
`MongoDB Change Streams <https://www.mongodb.com/docs/manual/changeStreams/>`__,
`Voyage AI <https://www.voyageai.com/>`__ 

**Partners:** `Microsoft Azure <https://azure.microsoft.com/en-us/pricing/purchase-options/azure-account/>`__

Solution Overview
-----------------

We’re in a digital era where manual, paper-based processes are rapidly
being replaced by automation and personalization. One example is the
shift toward digital receipts, which are becoming the industry standard
and are opening new opportunities for tailored customer experiences.

Retailers that embrace this transformation gain a competitive advantage
by unlocking the value of their data. Digital receipts provide rich,
actionable insights that can be used to power personalized product
recommendations. Data is power, and businesses that can effectively
store, access, and activate their data are better positioned to
differentiate themselves from the competition. 

This document explores how retailers can leverage MongoDB to store and
manage digital receipt data to deliver personalized product
recommendations and enhance the post shopping experience. You'll learn
about common challenges in managing receipt data and how MongoDB
simplifies access and activation for real-time, customer-centric
experiences.

.. video:: https://youtu.be/42M-ftLc-F8?si=vnu4yjT_41q5i_KO 

Transform Transaction Data into Actionable Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When a customer shops in a physical store, offering a digital receipt
becomes a strategic touchpoint. Retailers can use these receipts to
feature tailored suggestions and as a link to online shopping.

And when moving to the online experience, whether through a mobile app
or login through a browser, customers receive personalized product
recommendations based on their complete purchase history. This ensures
customers keep their loyalty benefits across all channels, while
enjoying a personalized experience powered by a unified 360° customer
journey.

.. figure:: /includes/images/industry-solutions/digital-receipts-fig1.svg
   :figwidth: 1200px
   :alt: digital receipts connect in-store and online journeys with real-time AI-powered recommendations
   
   Figure 1. With MongoDB, digital receipts connect in-store and online
   journeys with real-time AI-powered recommendations, enabling a 360°
   customer experience

Digital receipts provide businesses access to a range of strategic
advantages, including:

- **Enhancing customer engagement through personalized experiences:**
  With transaction data, retailers can tailor marketing efforts such as
  delivering smart product recommendations, sharing personalized offers,
  and running targeted ad campaigns. 

- **Unlocking valuable customer insights:** By analyzing behavior and
  preferences at scale.

- **Reducing operational costs:** By eliminating the need to print,
  store, and manage paper receipts. 

Data Management Challenges and How MongoDB Can Solve Them
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Managing receipt data can be difficult. Let’s explore the key obstacles
and how MongoDB can help overcome them. 

Siloed Data and No Single Source of Truth
`````````````````````````````````````````

Retailers often store multiple copies of sales data across disconnected
third-party tools, leading to limited visibility and fragmented
information that's hard to analyze, or activate. MongoDB addresses this
challenge by acting as a centralized, `flexible data platform
<https://www.mongodb.com/atlas>`__ that consolidates data from multiple
systems. It simplifies integration, breaks down silos and creates a
unified operational data layer that supports real-time data analysis for
actionable insights.

Sales Receipt Data Is Complex
`````````````````````````````

Sales data often comes from legacy systems and is stored in complex,
high-volume formats like XML, which are deeply nested and inconsistent.
In :abbr:`RDBMS (Relational Database Management Systems)`, architects
must spread the data in multiple tables to handle that complexity.
Instead, MongoDB uses its `flexible document model
<https://www.mongodb.com/resources/basics/flexible-data-model>`__ to
adapt to the data, not the other way around. This capability enables
faster development and easy schema changes, such as adding fields for
personalized recommendations, at any time with no downtime.

Rapid Data Scaling
``````````````````

Retailers generate massive volumes of receipt data every day and systems
must keep up. For example, `Albert Heijn, the largest supermarket chain
in the Netherlands
<https://www.mongodb.com/solutions/customer-case-studies/albert-heijn>`__,
uses MongoDB to run over 50 microservices, including their digital
receipts, processing over one million transactions daily. MongoDB
auto-scales, supports sharding and replica sets for high availability,
and enables workload isolation for real-time AI, reporting, or analytics
without impacting core application.

Customer Privacy
````````````````

Receipts often contain personal customer data making security and
compliance essential. MongoDB supports secure and compliant data
handling with robust, built-in enterprise security features and data
privacy. Including full lifecycle `data encryption
<https://www.mongodb.com/products/capabilities/security/encryption>`__,
:abbr:`RBAC (Role-based Access Control)`, and auditing. In addition,
`zone sharding
<https://www.mongodb.com/docs/manual/core/zone-sharding/>`__ allows you
to store data in your chosen region, supporting compliance and
performance across regions.

Unlock Real-time Insights from Receipt Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We created a proof of concept using MongoDB Atlas as the central data
store, demonstrating how retailers can turn receipt data into real-time
value by storing and activating operational data. In this proof of
concept, we built a backend microservice to handle invoice creation for
a mock e-commerce system. This service can be extended to work with data
from physical store systems. 

In this demo solution, you’ll learn how MongoDB creates a unified
operational view by combining operational and AI data. This approach
gives businesses full control over their data and keeps it accessible
for downstream use. 

As seen in the visual below, this solution uses receipt data to generate
real-time product recommendations for each order and includes them in
the digital receipt. These recommendations also appear on the user’s
homepage, enhancing their personalized post-shopping experience.

.. figure:: /includes/images/industry-solutions/digital-receipts-gif1.gif
   :figwidth: 1200px
   :alt: A mock e-commerce platform offering personalized product recommendations in digital receipts
   
   Figure 2. A mock e-commerce platform offering personalized product
   recommendations in digital receipts

Reference Architectures
-----------------------

Build a Foundation for Real-time Personalization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Personalized customer experiences start with connected, accessible, and
actionable data in real-time. A `unified view of operational data
<https://www.mongodb.com/resources/basics/implementing-an-operational-data-layer>`__
is key to unlock the full potential of modern technologies.

This demo uses MongoDB's `flexible document model
<https://www.mongodb.com/resources/basics/flexible-data-model>`__ and
real-time integration capabilities to show how you can store, update,
and activate operational data to deliver intelligent, responsive
customer journeys.

The diagram below shows a high-level view of the solution: 

- E-commerce and in-store transactions flow into the MongoDB invoices
  collection, creating a complete and unified purchase history for each
  customer.

- Operational data is stored using the MongoDB document model as a
  single source of truth. 

- Microservices and external systems integrate seamlessly with
  capabilities of MongoDB to deliver real-time, AI-powered
  recommendations, triggered directly by invoice data.

.. figure:: /includes/images/industry-solutions/digital-receipts-fig2.svg
   :figwidth: 1200px
   :alt: Core solution components
   
   Figure 3. This diagram illustrates the core components of the demo solution

In this section, you will explore how MongoDB integrates seamlessly with
surrounding systems to leverage invoice data and power personalized,
real-time customer experiences.

To build this solution, you deploy two backend `microservices
<https://www.mongodb.com/resources/solutions/use-cases/what-are-microservices>`__
- invoice and recommendation - on `Azure App Services
<https://learn.microsoft.com/en-us/azure/app-service/>`__, and use
`Azure Functions
<https://learn.microsoft.com/en-us/azure/azure-functions/>`__ to
simulate external integrations such as tax logic or loyalty programs.
Rendered receipts are stored as PDFs in `Azure Blob Storage
<https://learn.microsoft.com/en-us/azure/storage/blobs/>`__, tightly
linked to their structured metadata in MongoDB.

Model Invoices and Catalog Data for an AI-powered Use Case
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The document model allows us to store all invoice-related data in a
single collection, from tax details to a list of personalized product
recommendations based on a specific purchase. This flexibility ensures
that the schema can evolve alongside the business, enabling seamless
updates without friction or downtime.

To enable personalization, we are unlocking the strength of MongoDB in
storing semi-structured data. Our product catalog collection not only
includes core product information - such as price, description, and
categories; but also captures the semantic meaning of each item, powered
by AI embedding models. Using Voyage AI’s voyage-3-large text embedding
model, we enrich product data with vector embeddings, enabling vector
search for smarter, AI-driven retrieval across the catalog.

.. figure:: /includes/images/industry-solutions/product-description-architecture-extended.svg
   :figwidth: 1200px
   :alt: Product description architecture diagram with real-time integration
   
   Figure 2. Product description generative AI architecture with real-time applications

Build the Solution
------------------

This solution demonstrate how retailers can centralize
invoice data and deliver real-time personalization with a clean,
event-driven architecture powered by MongoDB Atlas.

The `backend repository
<https://github.com/mongodb-industry-solutions/retail-digital-receipts-backend/tree/main.`__
implements two microservices: one for invoice generation and one for
recommendations, along with supporting components such as Atlas
Triggers, Azure Functions, and Azure Blob Storage. These services
simulate how systems react to customer purchases in real time.

The frontend repository contains a mock e-commerce site, Leafy Popup
Store, for handling orders and user operations. Follow the set up
instructions before running this demo. Once deployed, you can use the UI
to simulate purchases that trigger the flows shown here.

.. procedure::
   :style: normal

   .. step:: Configure the pre-requisites

      Before running this solution you will need:
      
      - A MongoDB Atlas Account
      - A database pre-loaded with product embeddings (you can restore it using the dump provided here)
      - An Azure Account
      - Python 3.10
      - Poetry installed
      - Docker installed
      - GNU Make (default on macOS/Linux)

   .. step:: Set up instructions

      The project is organized as a multi-service backend system, with
      each microservice in its own folder and a shared Makefile and
      Docker Compose setup at the root level. To run the full solution
      or work on individual services, you'll find detailed setup steps
      in each README.

      Here’s a quick summary of what each part contains:

      1. `Main Project README: <https://github.com/mongodb-industry-solutions/retail-digital-receipts-backend/tree/main>`__
         Overview of the architecture, system components, and how to run
         all services together using make commands and Docker Compose.

      #. `services/invoice-ms: <https://github.com/mongodb-industry-solutions/retail-digital-receipts-backend/blob/main/services/invoice-ms/README.md>`__
         Setup instructions for the invoice microservice. Covers how to
         run it locally or in Docker, configure Azure Blob Storage and
         Azure Functions, and connect to MongoDB.

      #. `services/recommendations-ms: <https://github.com/mongodb-industry-solutions/retail-digital-receipts-backend/blob/main/services/recommendation-ms/README.md>`__.
         Setup for the recommendation engine, which listens to new
         invoices and performs a vector search in MongoDB Atlas. It
         includes the environment setup, connection to the vector index,
         and how to trigger and observe recommendations. Additionally,
         you will also find:

         - A `/docs/adr/ <https://github.com/mongodb-industry-solutions/retail-digital-receipts-backend/tree/main/docs/adr>`__
           folder with :abbr:`ADRs (Architecture Decision Records)`
           explaining modeling and design choices.

         - An `/external/ <https://github.com/mongodb-industry-solutions/retail-digital-receipts-backend/tree/main/external>`__
           folder containing sample Azure Functions and Atlas Triggers
           used in the demo, each with its own corresponding README.

Note:  Make sure to deploy the frontend and order system from the `Leafy
Pop-Up Store
<https://github.com/mongodb-industry-solutions/retail-store-v2/tree/main/resources/digitalReceipts>`__
demo before using this solution.

Key Learnings
-------------

Lets recap some of the key takeaways from the solution:

- **AI-Powered personalization is crucial to stay competitive and on
  top of the game:** It can boost customer engagement and strengthen
  loyalty. 

- **Digital receipts offer more value than just a transactional
  record:** Their insight can be used to personalize a 360 shoppers
  journey. They’re basically a marketing goldmine waiting to be
  discovered.

- **MongoDB is built for modern use cases:** It offers flexibility at
  scale, built-in security, and removes friction for seamless integration
  with real-time architectures and AI features.

Ready to turn your receipt data into personalized customer moments?
Start building with `MongoDB today
<https://www.mongodb.com/cloud/atlas/register>`__ or join the `MongoDB
Developer Community <https://www.mongodb.com/community/forums/>`__ to
connect with other tech lovers.

Authors
-------

- Florencia Arin, MongoDB
- Angie Guemes, MongoDB