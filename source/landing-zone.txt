.. _arch-center-landing-zone:

===================
Landing Zone Design
===================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::   
   :description: Learn how to design a landing zone for MongoDB Atlas.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

A landing zone is a framework for establishing a well-architected and
pre-configured cloud environment. A MongoDB {+service+} landing zone defines organization-specific requirements
for operational efficiency, security, reliability, performance, and cost,
as well as the tools, procedures, and {+service+} configurations that teams must use to meet these requirements. 
We recommend that all enterprise customers design a landing zone before moving workloads to {+service+}.

Designing and implementing a landing zone can help you avoid expensive 
efforts to redesign initial setups later down the line.
For example, one enterprise customer worked with {+ps+} in 2024 to set
company-wide standards for security and cost-efficiency before moving their workload to {+service+}.
Peer financial services companies had published new reports of user data leaks and runaway cloud costs due to
inconsistent encryption policies and redundant servers across business units. 
To avoid these risks, {+ps+} helped our enterprise customer design a landing zone that aligns all of their
teams and stakeholders on company requirements, including encryption at rest with {+byok+} and FinOps integrations to tag and track spending. 


.. _landing-zone-considerations:

What Are Some Landing Zone Considerations?
------------------------------------------

As you create your landing zone, define requirements for the following considerations: 

.. list-table::
   :header-rows: 1
   :widths: 20 80 

   * - Consideration
     - Description
   * - System Hierarchy
     - Choose a deployment hierarchy that groups your {+service+} organizations, projects, and clusters
       in order to isolate between business units, environments, and billable groups as needed. 
       For example, you can group business units into individual organizations to ensure that 
       sales credentials cannot authenticate to product resources. 
       
       To get recommendations and learn more about this topic, see
       :ref:`arch-center-hierarchy`.

   * - Security
     - By default, {+service+} blocks all access to your clusters, enforces |tls-ssl| encryption for all connections to your databases, 
       and encrypts data at rest using :ref:`cloud provider disk encryption <security-kms-encryption>`.
       You must define the following security requirements to enable secure access to your clusters: 

       - Network security configurations such as IP access list restrictions, or required private endpoints and |vpc| connections to limit 
         the extension of your network trust boundary
       - Principals and mechanisms for how to authenticate and authorize access to 
         the |service| control plane (|service| UI and {+atlas-admin-api+}), database resources, and database operations
       - Additional data encryption requirements for data in transit, at rest, and in use

       To get recommendations and learn more about this topic, see the following pages:

       - :ref:`arch-center-network-security`
       - :ref:`arch-center-auth`
       - :ref:`arch-center-data-encryption`

   * - Compliance
     - Consider how your deployment's data residency determines data sovereignty
       and therefore which laws apply to your data. Identify and account for any specific legal and regulatory
       requirements not clearly articulated within other categories of requirements. 

       Your data residency depends on which regions and geographies you choose to deploy to in your deployment paradigm, 
       and whether you choose to partition your data between geographies.  

       To get recommendations and learn more about this topic, see the following pages:

       - :ref:`arch-center-compliance`
       - :ref:`arch-center-paradigms`

   * - Disaster Recovery
     - Define and record a disaster recovery plan that meets the following criteria: 
     
       - Defines an optimal :abbr:`RPO (Recovery Point Objective)` and :abbr:`RTO (Recovery Time Objective)` for your organization
       - Defines a backup snapshot schedule and requirements for snapshot retention and mutli-region distribution 
       - Identifies recovery methods such as snapshot restores, queryable backups, document versioning, region shifting, 
         or provider pivot
       - Defines disaster recovery procedures for possible disaster scenarios such as zonal, regional, or cloud-provider 
         outages, resource failures, data corruption events, and more. 

       To get recommendations and learn more about this topic, see
       the following pages: 
       
       - :ref:`arch-center-dr`
       - :ref:`arch-center-backups`

   * - High Availability
     - Set standards for high availability that ensure system operation during planned or 
       unplanned outages. These requirements will partially determine the number of nodes, 
       regions, and cloud providers in your deployment paradigm. 

       To get recommendations and learn more about this topic, see
       the following pages: 

       - :ref:`arch-center-high-availability`
       - :ref:`arch-center-paradigms`

   * - Billing
     - Identify any specific requirements for billing, such as
       integrations with FinOps tools for reporting and charge-back.
       You can build these requirements into the automation and
       provisioning process for {+service+} clusters to facilitate
       this integration.

       To get recommendations and learn more about this topic, see
       :ref:`arch-center-billing-data`.

   * - Data Retention
     - Identify and record your data retention policies. This may
       require creating a classification for automation, including
       creation of archive or purge automation. In some cases, data
       must be preserved for a certain duration, whereas in other cases
       data must be purged after some duration. Identify performance
       characteristics of retrieval of archived records.

   * - Monitoring and Observability
     - Set standards for observability that define which logs and metrics you will monitor and how you will monitor them. For example, set up
       external system integrations that ingest {+service+} log files, audit logs, or activity feed data, 
       or configure alerts and reporting guidelines for certain event types.

       To get recommendations and learn more about this topic, see
       the following pages:
       
       - :ref:`arch-center-monitoring-alerts`.
       - :ref:`arch-center-auditing-logging`.

   * - Auditing and Change Control
     - Define any auditing or change control requirements. This
       can include change approval processes and tools, along with
       reporting guidelines.

       To get recommendations and learn more about this topic, see
       :ref:`arch-center-auditing-logging`.

   * - Maintenance
     - Identify whether you have any specific requirements regarding
       Maintenance windows or upgrade deferments.

Design Your Landing Zone
------------------------

{+ps+} team partners with enterprise
customers to create custom landing zones for {+service+}. If you're
working with {+ps+}, the resources on this
page can also help you plan for those discussions.

Use the following resources as a starting point for your {+service+} landing zone.
Designing a landing zone is an iterative process that involves reviewing
and realigning standards across teams. We recommend that you compile all diagrams, recommendations, and
examples in a document and adjust them to meet your organization's requirements.

Example Landing Zone Diagram
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example diagram unifies many of the architectural diagrams
across the {+atlas-arch-center+} in one image to visualize your
landing zone. You can adjust it as needed to customize it for your organization.

.. figure:: /includes/images/LandingZone.svg
   :alt: "A diagram showing an example {+service+} landing zone."
   :figwidth: 1000px
   :align: center
   :lightbox:

Information In The {+atlas-arch-center+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To begin, copy the relevant guidance and examples in :ref:`arch-center-hierarchy`, which helps you create your first foundational components in {+service+}.

Then, review the guidance and examples for each of the pages nested under each {+waf+} pillar in the {+atlas-arch-center+}. Copy the
diagrams, recommendations, tools, and examples that are relevant for
your organization.

The {+atlas-arch-center+} pages include:

- Operational Efficiency

  - :ref:`arch-center-automation`
  - :ref:`arch-center-monitoring-alerts`
- Security

  - :ref:`arch-center-network-security`
  - :ref:`arch-center-auth`
  - :ref:`arch-center-data-encryption`
  - :ref:`arch-center-compliance`
  - :ref:`arch-center-auditing-logging`
- Reliability

  - :ref:`arch-center-high-availability`
  - :ref:`arch-center-resiliency`
  - :ref:`arch-center-backups`
  - :ref:`arch-center-dr`
- Performance

  - :ref:`arch-center-scalability`
- Cost Optimization

  - :ref:`arch-center-cost-saving-config`
  - :ref:`arch-center-billing-data`

Your Organization's Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Adjust the example landing zone diagram, recommendations, and examples
that you copied from the {+atlas-arch-center+} to fit your
organization's specific requirements. For example, if you use only 
{+gcp+} as a cloud provider, your landing zone should specify that
requirement and you should exclude any recommendations and examples
applicable only to |aws| and |azure|.

To identify more considerations and requirements specific to your
organization, see the previous section on
:ref:`Landing Zone Considerations <landing-zone-considerations>`.

Next Steps
----------

See the :ref:`arch-center-migration` page to plan your migration
to {+service+} or use the left
navigation to find features and best practices for each {+waf+} pillar.
