.. _solutions-rag-applications:

===============================================
Building continuously updating RAG applications
===============================================

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :keywords: RAG, Atlas
   :description: Use native stream processing and vector search in MongoDB Atlas to continuously update, store, and search embeddings through a unified interface.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

**Use cases:** `Gen AI <https://www.mongodb.com/use-cases/artificial-intelligence>`__
**Industries:** `Finance
<https://www.mongodb.com/industries/financial-services>`__,
`Healthcar<https://www.mongodb.com/industries/healthcare>`__, `Retail
<https://www.mongodb.com/industries/retail>`__
**Products:** `Atlas <http://mongodb.com/atlas>`__, `Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__, `Atlas
Stream Processing <https://www.mongodb.com/products/platform/atlas-stream-processing>`__
**Partners:** `Confluent <http://confluent.io/>`__, `AWS <http://aws.com/>`__

Solution Overview
-----------------

Whether organizations leverage AI to optimize business processes or enhance
customer-facing applications, providing AI models with up-to-date data is
essential to delivering a differentiated experience. While retrieval-augmented
generation (`RAG
<https://www.mongodb.com/basics/retrieval-augmented-generation>`__) systems
enable organizations to ground large language models (`LLMs
<https://www.mongodb.com/basics/large-language-models>`__) easily
and foundational models with the truth of their proprietary data, keeping that
data fresh adds another level of complexity.

By continuously updating vector embeddings, the core of RAG systems, AI models
have up-to-date data to provide pertinent and accurate answers. Additionally,
different embedding models may offer higher levels of accuracy depending on
their primary purpose. Take, for example, an embedding model trained primarily
on a specific language, such as Japanese or Simplified Chinese, instead of a
more popular model that might have general knowledge of several languages. The
specialized model will likely create embeddings that enable the foundation 
model or LLM to output content more accurately.

This solution addresses the issue of continuously updating and routing the
creation of vector embeddings in a RAG system. By leveraging `MongoDB Atlas
Stream Processing
<https://www.mongodb.com/products/platform/atlas-stream-processing>`__ and
`MongoDB Atlas Vector Search
<https://www.mongodb.com/products/platform/atlas-vector-search>`__, both native
capabilities in MongoDB Atlas, this solution walks developers through
continuously updating, storing, and searching embeddings with a single 
interface.

While this solution demonstrates creating vector embeddings of song lyrics in
different languages, the scenario is relevant to many industries and use cases,
including:

- **Financial services:** Financial documents, legal policies, and contracts
  often use multiple languages and differ based on country regulations.
  Empowering loan officers with an AI-powered interface for expediting loan
  creation can optimize banking workflows; however, the optimization will only
  benefit as much as the data is relevant and fresh.

- **Healthcare and Insurance:** From constantly updating patient records to 
  AI-powered underwriting of insurance policies, itâ€™s important that any RAG 
  system that optimizes these processes has access to the latest information.

- **Retail:** Personalizing retail experiences by delivering the right offer at
  the right time to the right customer is critical. However, consider the many
  languages that shoppers might use and product descriptions that have to
  match. Routing up-to-date, contextual data to the most accurate embedding
  model can improve these experiences.

Reference architectures
-----------------------

With MongoDB
~~~~~~~~~~~~

- **MongoDB:** With a MongoDB cluster deployed in Atlas, it allows you to store
  the lyrics and related information under the same document (tags, vectors,
  etc.). Additionally, Atlas provides a vector index to support semantic 
  searches using the MongoDB Aggregation Framework.
- **Atlas Stream Processing:** This Stream Processing Instance subscribes to
  the events generated by MongoDB, filters the relevant information, transforms
  the events, and emits them to the corresponding Kafka topic. Additionally, it
  will subscribe to the Kafka cluster to update the documents that change.
- **Confluent Kafka cluster:** This managed Kafka cluster will receive the new
  documents and updates from current documents to be processed. Additionally,
  the events received by the processor will be directed to Atlas Stream 
  Processing.

- **Metadata service:**

   - **Embedding generator:** Python script that subscribes to the Kafka input
     topics (both Spanish and English). For each message received, it reads the lyrics and generates an embedding using a model specific for each language.
   - **Tags extractor:** Python script that extracts the tags from the lyrics
     (the 10 most common nouns) and adds it to the resulting event.

.. figure:: /includes/images/WIP.png
   :figwidth: 750px
   :alt: Scalable vector updates reference architecture with MongoDB

Data model approach
-------------------

.. code-block:: javascript
   :copyable:true

   {
      "title": "Hurricane",
      "genre": "rock",
      "artist": "Bob Dylan",
      "year": 1976,
      "views": 307418,
      "lyrics": "...",
      "language": "en",
      "duration": 61,
      "lyrics_embeddings_en": [...],
      "tags": ["man", "story", "night"]
   }

The data we currently have about the song consists of the following fields:

- **Title:** Name of the song
- **Genre:** a single-worded string containing a music style from a list of 6 
  genres
- **Artist:** Name of the artist
- **Year:** The year in which the song was written
- **Views:** Number of times the song has been listened to
- **Lyrics:** A string field containing the lyrics with each line separated by 
  a new line delimiter
- **Language:** The language of the lyrics in ISO-369. We are only storing 
  songs in English and Spanish.
- **Duration:** Duration of the song in seconds
- **Lyrics embedding vector:** language-specific embeddings vector
- **Tags:** A list of tags associated with the lyrics

The benefit of using the document data model is that it allows you to store all
the related information of a song in a single document for easy and fast 
retrieval.