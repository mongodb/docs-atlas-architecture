.. _arch-center-paradigms-multi-region:

================================
Multi-Region Deployment Paradigm
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

Multi-region {+service+} deployments set up {+cluster+} nodes across
multiple regions (as defined by the cloud providers). Multi-region
deployments enhance protection in the case of a :ref:`regional outage
<arch-center-regional-outage>` by automatically rerouting traffic to a
node in another region for continuous availability and a
smooth user experience. Multi-region deployments can also enhance
performance and can help meet compliance requirements for :ref:`data sovereignty
<arch-center-compliance-data-sovereignty>`, such as the EU's General Data 
Protection Regulation (GDPR) law.

A multi-region deployment may have multiple regions within the same geography 
(a large area like a continent or country), single regions in multiple 
geographies, or multiple regions in multiple geographies.

Multi-region deployments can exist with a single cloud provider or 
multiple cloud providers. To learn about multi-cloud deployments, see 
:ref:`arch-center-paradigms-multi-cloud`.

To learn how to configure multi-region deployments and learn about the
different types of nodes you can add, see 
:atlas:`Configure High Availability and Workload Isolation 
</cluster-config/multi-cloud-distribution/>` in the {+service+}
documentation.

Use Cases for Multi-Region Deployments
--------------------------------------
Consider the 3 use cases in the following image:

.. figure:: /includes/images/multi-region-types.png
   :figwidth: 750px
   :alt: An image showing three types of multi-region deployments

In the first example, where you deploy to multiple regions in the same geography, 
you have an application that has users primarily located in the US. You create a 
multi-region deployment in three regions within the US. This ensures low latency, 
since all regions are within the US, while also offering high availability if 
there's a regional outage on one of the nodes (for example, ``us-east-1``).

In the second example, where you deploy to one region in multiple geographies, 
your application requires low latency and high availability for users in both 
the US and Europe. You create a multi-region deployment with a region located 
in both the US and Europe. In this scenario, European users are served from the 
European nodes and US users are served from US servers, ensuring lower latency 
and better performance. This also helps comply with local regulations like GDPR.

The most complex example of a multi-region deployment has multiple regions in 
multiple geographies, ensures the highest level of availability with a single 
provider. If your application requires the very highest level of availability 
and lowest latency, consider a :ref:`arch-center-paradigms-multi-cloud`.

..  _arch-center-global-deployments:

Global Deployments 
------------------

Global {+service+} deployments are the most complex multi-region deployment 
paradigms, and therefore require very careful planning. In almost all cases,  
a :ref:`arch-center-paradigms-multi-region` (or its subset, a
:ref:`arch-center-paradigms-multi-cloud`) will fulfill your needs.

The following are a few reasons why you might consider a global deployment 
strategy:

- You need a single global connection string.
- You need to perform global aggregations across all customers.
- You need the ability to read/write for all customers from everywhere 
  in one logical cluster, while also having regional reads/writes.

.. note::

   The complexity of global deployments results in many opinions on best 
   practices. The {+atlas-arch-center+} does not currently cover recommendations
   specific to global deployments. Contact {+ps+} team to discuss your 
   specific requirements and to design a {+service+} global deployment 
   strategy.

Data Sovereignty and High Availability Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For compliance with data residency laws, data can be partitioned to
reside in specific regions, ensuring adherence to local regulations.
However, deploying to a single region sacrifices high availability if
there is a regional outage. 

You can configure a multi-region deployment for both high availability 
and data sovereignty. For example, for an application deployed with |aws| 
that requires data storage in Europe, you can deploy a multi-region deployment
to three regions within the EU (such as ``eu-west-1``, ``eu-west-2``, 
and ``eu-west-3``). This ensures data sovereignty since all regions are within 
the EU, while offering high availability if there's a regional outage that 
affects one of the nodes.

.. _arch-center-multi-region-rec-summary:

Recommendations for Multi-Region Deployments
---------------------------------------------

.. include:: /includes/rec-list.rst

