.. _arch-center-automation:

==========
Automation
==========

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: atlas architecture center
   :description: Learn about the different Atlas tools to automate the provisioning and management of Atlas clusters and projects.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: onecol

|service-fullname| provides an easy way to host and manage your data in
the cloud. It includes tools that automate the deployment, scaling, and
maintenance of your {+service+} {+clusters+} to streamline operations,
reduce manual interventions, and ensure consistent, policy-compliant
deployments. These tools offer you the flexibility to work with
|service| through direct scripting, a Kubernetes-native workflow, or
using Infrastructure as Code (IaC) resources.    

{+service+} Features for Automation
-----------------------------------

You can automate the management, provisioning, and configuration of
|service| building blocks like database users and roles, |service|
{+clusters+}, projects and organizations. Additionally, you can automate 
setting up and managing of additional {+clusters+} resources, including
enabling auto-scaling and disk scaling, creating and updating
multi-cloud {+clusters+}, monitoring {+cluster+} performance and health,
automating backups and restores, defining backup policies, and many more.   

You can align your choice of tools with your preferred workflow to
ensure seamless integration of |service-fullname| into your existing
processes. The following |service-fullname| tools allow you to easily
deploy and manage |service| at scale with repeatable, accurate, and
scalable processes. 

{+atlas-admin-api+} 
~~~~~~~~~~~~~~~~~~~~~~~~

The {+atlas-admin-api+} provides a |rest|\ful interface that allows you
to leverage your preferred client such as cURL or Postman to
directly interact with |api| endpoints that correspond to |service|
resources.   

To learn more, see :ref:`atlas-admin-api-access`.

GoSDK Client 
~~~~~~~~~~~~

The {+service+} Go SDK client simplifies interaction with the
{+atlas-admin-api+} by providing pre-built functions and full |api|
endpoint coverage. The SDK provides platform-specific and GoLang
language-specific tools, libraries, and documentation to help build
applications quickly and easily.  

To learn more, see :ref:`Atlas Go SDK <atlas-admin-sdk>`.

Infrastructure as Code (IaC) Integrations 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The integrations with the following :abbr:`IaC (Infrastructure as Code)`
tools automate the deployment of |service| resources.

HashiCorp Terraform MongoDB Atlas Provider
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Provisions |service| resources across cloud providers (|aws|, |azure|,
|gcp|) in the workflow of your choice. It allows you to integrate
|service| into your continuous delivery workflows with the official
plugin that is verified and tested by HashiCorp. 

Alternatively, you can use the :abbr:`CDKTF (Cloud Development Kit for
Terraform)` to deploy |service| in preferred languages such as
JavaScript, TypeScript, Python, Java, C#, and Go. 

To learn more, see :ref:`getting-started-terraform` and
|service-terraform|. You can also use the Terraform examples in the
{+atlas-arch-center+} such as the :ref:`Org, Project, and
Cluster<arch-center-hierarchy>` examples to get started. 

CloudFormation Resources
~~~~~~~~~~~~~~~~~~~~~~~~

Resources to manage |service| include:
      
- :github:`JSON and YAML templates
  <mongodb/mongodbatlas-cloudformation-resources>` allow you to leverage
  multiple different types of |service| resources in the |aws|
  CloudFormation Public Registry.   
- `AWS Partner Solutions <https://aws.amazon.com/solutions/>`__ enable
  you to set up an |service| environment in |aws| by using a pre-defined
  CloudFormation template that creates an |service| project with a
  standard, single-region, ``M10`` {+cluster+}. 
- `AWS Cloud Development Kit (CDK) <https://constructs.dev/search?q=&keywords=MongoDB&offset=0>`__
  defines infrastructure using familiar programming languages such as
  JavaScript, TypeScript, Python, Java, C#, and Go. 

To learn more, see `Deploy MongoDB Atlas with AWS CloudFormation <https://www.mongodb.com/developer/products/atlas/deploy-mongodb-atlas-aws-cloudformation/>`__.
   
{+atlas-cli+} 
~~~~~~~~~~~~~

Enables you to create, manage, and automate tasks related to |service|
resources from a unified command line tool. 

To learn more, see :ref:`atlas-cli-ephemeral-cluster` and :ref:`Quick
Start <atlas-cli-quick-start>`. You can also use the {+atlas-cli+}
examples in the {+atlas-arch-center+} such as the :ref:`Org, Project,
and Cluster<arch-center-hierarchy>` examples to get started.

|ak8so| 
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Allows you to deploy and manage |service| resources using you existing
Kubernetes tools. The Operator enables management of |service| through
custom resources applied into Kubernetes, which the Operator uses to
configure |service|.  

To learn more, see :ref:`ak8so-quick-start-ref`. 
