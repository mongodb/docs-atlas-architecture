.. _arch-center-paradigms-global:

==========================
Global Deployment Paradigm
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

Global {+service+} deployments set up {+cluster+} shards across up to
nine distinct zones that you define, where each zone supports write and
read operations from geographically local shards. {+service+} uses the
geographic location of the :guilabel:`Highest Priority` region in each
zone to construct a map of geographically-near countries and
subdivisions. The global deployment uses this map to serve content
and performs write from the region nearest a user.

Like multi-region
deployments, global deployments can enhance protection in the case of a
regional outage by automatically rerouting traffic to a
shard in another region for continuous availability and a
smooth user experience. However, global deployments differ from
multi-region deployments because they maximize global performance around
latency reduction by serving content from regions closest to users,
rather than using a set priority region for all users.

To learn how to configure global deployments and learn about the
different types of nodes you can add, see 
:atlas:`Manage Global Clusters 
</global-clusters/>` in the {+service+}
documentation.

The following diagram shows a global {+service+}
deployment:

.. figure:: /includes/images/global.svg
   :figwidth: 750px
   :alt: An image showing three global cluster zones, each with three nodes in its highest priority region.

Use Case for Global Deployments
-------------------------------

Global deployments are best for the following use
case:

Global Applications that Require Low Latency, High Availability, or Data Sovereignty (One or More Cloud Providers)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To improve performance for critical operations,
all {+service+} deployments allow you to deploy data
close to your users' geographic location, which reduces latency.
However, deploying to a single region sacrifices high availability if
there is a regional outage, and using a multi-region deployment requires
region specificity. Additionally, for compliance with data residency
laws, you can partition data in global deployments to reside in
specific regions, ensuring adherence to local
regulations. You can configure a global deployment for
high availability, data sovereignty, low latency for a global audience,
*and* avoid vendor lock-in.

A global deployment may be best for you if you have
the following requirements:

- You want to use a single cloud provider *or* multiple cloud providers
- You want to deploy to more than one region for high availability
- Your application requires low latency *and* has global users, since
  global deployments serve content from the region closest to the user
  across zones that you specify.

For example, for an application deployed with |aws| with users
located globally, you can use a template to deploy a global deployment
to six :guilabel:`Highest Priority` regions, as shown in the following
image:

.. image:: /includes/images/global-template.png
   :alt: "An image showing latency per geographic area for a global cluster with six regions."
   :width: 600px
   :align: center

The previous template deploys at least one shard per region for the 
following regions:

- N. Virginia (``us-east-1``)
- Oregon (``us-west-2``)
- Sao Paulo (``sa-east-1``)
- Frankfurt (``eu-central-1``)
- Singapore (``ap-southeast-1``)
- Tokyo (``ap-northeast-1``)

{+service+} uses the geographic location of your zones to serve content
and performs write from the region nearest a user. You can also
add additional nodes in other regions to each global {+cluster+} zone.
This ensures low latency from any location globally, while offering
high availability if there's a regional outage that affects the primary
shard.

If your application requires low latency for users in specific regions,
consider a :ref:`arch-center-paradigms-multi-region`.

If your application requires low latency for users in specific regions,
high availability, and deployment across multiple cloud providers,
consider a :ref:`arch-center-paradigms-multi-cloud`.

If your application requires low latency but doesn't require
cross-region high
availability, consider a :ref:`arch-center-paradigms-single`.

Recommendations for Global Deployments
--------------------------------------

The {+atlas-arch-center+} does not currently cover recommendations
specific to global deployments. Contact {+ps+}
team to create a custom landing zone for your {+service+} global
deployments.

