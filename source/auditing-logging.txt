.. _arch-center-auditing-logging:

=============================================
Guidance for {+service+} Auditing and Logging
=============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

To monitor and log |service| platform activities, use auditing and logs.

Features for {+service+} Auditing and Logging
---------------------------------------------

.. _auditing:

Auditing
~~~~~~~~

Available on ``M10+`` {+clusters+}, database auditing lets you track system 
activity for deployments with
multiple users. As an |service| administrator, you can:

- Rely on default auditing settings in |service|. By default, |service|
  performs database authentication auditing in ``M10+`` {+clusters+} to
  record authentication events, including those pertaining to:

  - database users
  - source IP addresses
  - timestamps for successful and failed attempts

- :atlas:`Configure a JSON-formatted audit filter 
  </database-auditing/#configure-a-custom-auditing-filter>` to
  customize MongoDB auditing
  and select the actions, database users, |service| roles, and |ldap| groups
  that you want to audit. If you create a custom audit filter, you can
  skip using the managed {+atlas-ui+} auditing filter builder and configure
  your own tailored filter of event auditing. For a full list of
  events you can configure for auditing, and for a list of examples,
  see :manual:`MongoDB auditing </core/auditing>` and :atlas:`Example Auditing Filters 
  </database-auditing/#example-auditing-filters>`.
  
  You can :manual:`configure manual auditing </core/auditing>` of most of the
  documented :manual:`system event actions </reference/audit-message/mongo/#audit-event-actions--details--and-results>`
  in |service|. Granular MongoDB database auditing allows you to track
  usage of all DDL (Data Definition Language), DML (Data Manipulation Language),
  and DCL (Data Control Language) commands in detail. See also
  :atlas:`Set up Database Auditing </database-auditing>`.

.. _accessing-audit-logs:

Accessing Audit Logs
~~~~~~~~~~~~~~~~~~~~

You can use the {+atlas-cli+}, {+atlas-admin-api+}, or {+atlas-ui+} for the following auditing activities: 

- :ref:`View and download audit logs <set-up-database-auditing>` to track :ref:`system event actions <audit-action-details-results>`
  for deployments with multiple users. {+service+} administrators can configure a custom auditing filter to 
  choose the actions, database users, {+service+} roles, and |ldap| groups that they want to audit.

- :ref:`View and download MongoDB logs <mongodb-logs>` to track log events for your deployment, including incoming connections, 
  commands run, and issues encountered. Generally, log messages are useful for diagnosing issues, monitoring your deployment, and tuning performance.

- :ref:`View project and organization events <view-activity-feed>` in the :guilabel:`Project Activity Feed`
  and :guilabel:`Organization Activity Feed`. These activity feeds list all events at the organization or project level, including 
  changes related to {+service+} access, alert configurations and monitoring, billing, and more.  

- :ref:`View database authentication attempts <access-tracking>` that users make against your {+cluster+} in your access logs 
  (i.e. :guilabel:`Database access history` in the {+atlas-ui+}).
  |service| logs both successful and unsuccessful authentication attempts,
  including the timestamp of each attempt and which user tried to authenticate.

Programmatic Access to Audit Logs
`````````````````````````````````

To integrate with tools beyond the built-in integrations, we recommend
that you retrieve logs with the following programmatic tools and feed
the |json|-formatted output to your external tools:

- To continually push logs to an |aws| |s3| bucket, use the {+atlas-admin-api+}
  endpoints for :oas-atlas-tag:`Push-Based Log Export </Push-Based-Log-Export>`.
- To retrieve deployment logs and lists of project events,
  use the {+atlas-admin-api+} endpoints for :oas-atlas-tag:`Monitoring and Logs </Monitoring-and-Logs>`
  and :oas-atlas-tag:`Project and Organization Events </Events>`.
- To retrieve deployment logs, use the :ref:`atlas deployment logs <atlas-deployments-logs>`
  command in the {+atlas-cli+}. 
  
.. _arch-center-auditing-logging-recs:

Recommendations for {+service+} Auditing and Logging
----------------------------------------------------

.. collapsible::
   :heading: Single-Region Deployment Recommendations
   :sub_heading: Recommendations that apply only to deployments in a single region
   :expanded: true

   Singe-region deployments have no unique considerations for auditing and logging.
   See the next section for "All Deployment Paradigm Recommendations".

.. collapsible::
   :heading: Multi-Region and Multi-Cloud Deployment Recommendations
   :sub_heading: Recommendations that apply only to deployments across multiple regions or multiple cloud providers
   :expanded: true

   Multi-region and multi-cloud deployments have no unique considerations
   for auditing and logging. See the next section for "All Deployment Paradigm Recommendations".

All Deployment Paradigm Recommendations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following recommendations apply to all :ref:`deployment paradigms
<arch-center-paradigms>`.

We recommend that you :atlas:`set up database auditing </database-auditing>`
when you provision your {+clusters+}. To perform a full audit, 
you can use a combination of :manual:`audit logs </reference/audit-message/>`, 
:manual:`MongoDB log messages </reference/log-messages/>`, 
and :ref:`the project and organization activity feed <view-activity-feed>`.

Auditing puts additional load on your {+clusters+} and increases costs. 
To optimize {+cluster+} performance and minimize costs, we recommend that you 
limit the number of users that you audit, and disable auditing in development environments.  
Certain industries, such as healthcare and financial services, may opt to keep 
auditing enabled in development environments for compliance reasons.

We recommend that you audit the following events at a minimum:

- Failed logon
- Session activity
- Logon and logoff
- Attempts to perform unauthorized functions
- Password change
- Database User Access changes
- DDL & System configuration stored procedures
- Modification of Native audit
- Running a backup or restore operation
- Altering DBMS native audit settings
- Altering security
- Running database start and stop commands

By default, audit log messages are returned in a format designed by MongoDB, 
called the :manual:`mongo schema </reference/audit-message/mongo/>`. 
Audit log messages that follow the ``mongo`` schema always include the following information:

- Action type (``atype``)
- Timestamp 
- Client connection ID (UUID) 
- Client IP address and port number
- Incoming connection IP address and port numbe
- Username(s)
- User authentication database(s)
- User role(s)
- User role database(s)
- ``param`` document containing specific details for the event 
- Result value or error code

For a full list of audit action types and their associated ``param`` details and ``result`` values, 
see :manual:`mongo Schema Audit Messages </reference/audit-message/mongo/>`. 

Automation Examples: {+service+} Auditing and Logging
-----------------------------------------------------

.. include:: /includes/complete-examples.rst

The following examples show how to retrieve and download logs and configure auditing
using |service| :ref:`tools for automation <arch-center-automation>`.

In addition to the following examples, see the blogpost
`Streamlining Log Management to Amazon S3 Using Atlas Push-based Log Exports With HashiCorp Terraform <https://www.mongodb.com/developer/products/atlas/streamlining-log-management-amazon-s3-atlas-push-based-log-exports-hashicorp-terraform/>`__.

.. tabs::

   .. tab:: CLI
      :tabid: cli

      Create and Enable Filter
      ~~~~~~~~~~~~~~~~~~~~~~~~

      The following document defines an audit filter that restricts audits to only the
      authentication operations that occur against the ``test`` database. 
      To learn more, see :manual:`Configure Audit Filters </tutorial/configure-audit-filters/>`.

      .. include:: /includes/examples/cli/cli-example-audit-filter.rst

      To enable an audit filter, run the :ref:`atlas auditing update <atlas-auditing-update>`
      command with the ``--enabled`` flag and specify the audit filter document in single quotes
      to pass the document as a string: 

      .. include:: /includes/examples/cli/cli-example-audit-filter-use.rst

      The following {+atlas-cli+} command enables an audit filter that is defined in 
      the specified |json| configuration file: 

      .. include:: /includes/examples/cli/cli-example-audit-logs-config-file.rst

      Update Audit Configuration
      ~~~~~~~~~~~~~~~~~~~~~~~~~~

      To update your project's audit configuration, use the :ref:`atlas auditing update <atlas-auditing-describe>`
      command and specify the new audit filter. The following command replaces the existing 
      audit filter configuration with a new filter that audits all authentication events for known users in the project: 

      .. include:: /includes/examples/cli/cli-example-audit-logs-known-users.rst

      Describe Audit Configuration
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      Run the :ref:`atlas auditing describe <atlas-auditing-describe>`
      command to return the auditing configuration for the specified project:

      .. include:: /includes/examples/cli/cli-example-audit-logs-describe.rst

      Retrieve Logs
      ~~~~~~~~~~~~~

      Each |mongod| and |mongos| instance in a cluster outputs its own
      :manual:`MongoDB log </reference/log-messages/>` and audit log messages 
      with potentially different contents than other instances. 
      You can view these log messages in the {+atlas-cli+} using the 
      :ref:`atlas deployment logs <atlas-deployments-logs>` command. 

      To retrieve audit log entries for a |mongod| instance in your cluster, 
      provide the |mongod| hostname and specify ``mongodb-audit-log.gz`` as the name of the audit log file: 

      .. include:: /includes/examples/cli/cli-example-retrieve-audit-logs-mongod.rst

      To retrieve audit log entries for a |mongos| instance in a sharded cluster deployment, 
      provide the |mongos| hostname and specify ``mongos-audit-log.gz`` as the name of the audit log file: 

      .. include:: /includes/examples/cli/cli-example-retrieve-audit-logs-mongos.rst

      To retrieve :manual:`MongoDB log messages </reference/log-messages/>`, provide the hostname of your |mongod| or |mongos| instance, 
      and specify the name of the log file as ``mongodb.gz`` or ``mongos.gz``, respectively:

      .. include:: /includes/examples/cli/cli-example-retrieve-logs.rst

      You can also use the :ref:`atlas accessLogs list <atlas-accessLogs-list>` command to view the access log for
      a node or cluster.
      The access log is a |json|-formatted list of all authentication requests against your specified node or cluster. 
      To retrieve the access log, run the :ref:`atlas accessLogs list <atlas-accessLogs-list>` command 
      and specify the hostname or {+cluster+} name of the target node or {+cluster+}: 

      .. include:: /includes/examples/cli/cli-example-retrieve-access-logs.rst

      Download Logs
      ~~~~~~~~~~~~~

      Each |mongod| and |mongos| instance in a cluster has its own
      :manual:`MongoDB log </reference/log-messages/>` and audit log
      with potentially different contents than other instances. 
      You can download each log as a compressed file using the 
      :ref:`atlas logs download <atlas-deployments-logs>` {+atlas-cli+} command. 

      To download the audit log for a |mongod| instance in your cluster, 
      provide the |mongod| hostname and the audit log file name ``mongodb-auditlog.gz`` as arguments: 

      .. include:: /includes/examples/cli/cli-example-download-audit-logs-mongod.rst

      To download the audit log for a |mongos| instance in a sharded cluster deployment, 
      provide the |mongos| hostname and the audit log file name ``mongos-auditlog.gz`` as arguments: 

      .. include:: /includes/examples/cli/cli-example-download-audit-logs-mongos.rst

      To download the :manual:`MongoDB log </reference/log-messages/>` for a |mongod| or |mongos| instance, 
      provide as arguments the hostname of the instance and the log file names ``mongodb.gz`` or ``mongos.gz``, respectively:

      .. include:: /includes/examples/cli/cli-example-download-logs.rst

      Retrieve All Project Alerts
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You can use the following {+atlas-cli+} commands to return alerts triggered by
      events for your project or organization. {+service+} provides alerts such as
      :alert:`Replica set has no primary` and :alert:`User joined the project` by default. 
      These events provide a record of significant activities and changes within the project or organization,
      including significant database, billing, or security activities or status changes.
      To customize which events trigger alerts for your project and organization, see :ref:`configure-alerts`.

      Retrieve All Log Events for Your Project or Organization
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You can use the following {+atlas-cli+} commands to return project or organization events from your
      :guilabel:`Project Activity Feed` or :guilabel:`Organization Activity Feed`.
      :alert:`Replica set has no primary` and :alert:`User joined the project` by default. 

      To return all events for your organization, use the :ref:`atlas events organizations list <atlas-events-organizations-list>` 
      command and specify your organization ID. The following command returns a JSON-formatted list of events for the
      organization with the ID ``5dd5a6b6f10fab1d71a58495``:

      .. include:: /includes/examples/cli/cli-example-retrieve-logs-org.rst

      To return all events for your project, use the :ref:`atlas events projects list <atlas-events-projects-list>` 
      command and specify your project ID. The following command returns a JSON-formatted list of events for the
      project with the ID ``64ac57bfe9810c0263e9d655``:

      .. include:: /includes/examples/cli/cli-example-retrieve-logs-org.rst

   .. tab:: Terraform
      :tabid: Terraform
 
      The following example demonstrates how to enable auditing for
      your deployment. Before you can create resources with Terraform,
      you must:

      - :ref:`Create your paying organization <configure-paying-org>`
        and :ref:`create an API key <atlas-admin-api-access>` for the
        paying organization. Store your public and private keys as
        environment variables by running the following commands in the terminal:

        .. code-block::

           export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
           export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

      - `Install Terraform <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__.

      Enable Auditing and Create an Auditing Filter for the {+Cluster+}
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      You can :manual:`configure manual auditing </core/auditing>` of most of the
      documented :manual:`system event actions </reference/audit-message/mongo/>`
      by creating audit filters. To learn more about configuring audit filters,
      see :manual:`Configure Audit Filters </tutorial/configure-audit-filters/>`.

      .. include:: /includes/examples/terraform/tf-example-auditing-filter.rst

      Retrieve Logs
      ~~~~~~~~~~~~~

      You can't retrieve logs with Terraform. Instead, use the following
      {+atlas-admin-api+} endpoints:

      - Use :oas-atlas-tag:`Access Tracking Admin API </Access-Tracking>`
        to return access logs for all authentication attempts for the database,
        identified by the cluster's name or hostname.

      - Use :oas-atlas-tag:`Monitoring and Logs APIs </Monitoring-and-Logs>`
        to retrieve a compressed log file with log messages for the specified
        host.
