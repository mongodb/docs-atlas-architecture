.. _arch-center-auditing-logging:

====================
Auditing and Logging
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

To monitor and log |service| platform activities, use auditing and logs.

{+service+} Features and Recommendations for Auditing and Logging
-----------------------------------------------------------------

Features
~~~~~~~~

.. _auditing:

Auditing
````````

Available on ``M10+`` {+clusters+}, database auditing lets you track system 
activity for deployments with
multiple users. As a |service| administrator, you can:

- Rely on default auditing settings in |service|. By default, |service|
  performs database authentication auditing in ``M10+`` {+clusters+} to
  record authentication events, including those pertaining to:

  - database users
  - source IP addresses
  - timestamps for successful and failed attempts

- :atlas:`Configure a JSON-formatted audit filter 
  </database-auditing/#configure-a-custom-auditing-filter>` to
  customize MongoDB auditing
  and select the actions, database users, |service| roles, and |ldap| groups
  that you want to audit. If you create a custom audit filter, you can
  skip using the managed {+atlas-ui+} auditing filter builder and configure
  your own tailored filter of event auditing. For a full list of
  events you can configure for auditing, and for a list of examples,
  see :manual:`MongoDB auditing </core/auditing>` and :atlas:`Example Auditing Filters 
  </database-auditing/#example-auditing-filters>`.
  
  You can :manual:`configure manual auditing </core/auditing>` of most of the
  documented :manual:`system event actions </reference/audit-message/mongo/>`
  in |service|. Granular MongoDB database auditing allows you to track
  usage of all DDL (Data Definition Language), DML (Data Manipulation Language),
  and DCL (Data Control Language) commands in detail. See also
  :atlas:`Set up Database Auditing </database-auditing>`.

.. _accessing-audit-logs:

Accessing Audit Logs
````````````````````

.. include:: /includes/cloud-docs/logs.rst

To return and update your audit configuration per project, use the following {+atlas-cli+} commands:

- :ref:`atlas auditing describe <atlas-auditing-describe>` returns the
  auditing configuration for the specified project.
- :ref:`atlas auditing update <atlas-auditing-update>` updates
  the auditing configuration for the specified project.

You can :ref:`view authentication attempts <access-tracking>` that users
make against your {+cluster+} with the {+atlas-cli+}, 
{+atlas-admin-api+}, or {+atlas-ui+}. |service| logs both successful and unsuccessful
authentication attempts, including the timestamp of each attempt and which
user tried to authenticate.

You can also :ref:`view and filter the activity feed <view-activity-feed>`
for an organization or project with the {+atlas-cli+}, 
{+atlas-admin-api+}, or {+atlas-ui+}. The activity feed lists all
events at the organization or project level

To perform a full audit, you can use a combination of audit logs,
the ``mongodb.log``, and :ref:`the project activity feed <view-activity-feed>`.

Recommendations for Auditing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend that you enable auditing when you provision your {+clusters+}. 
However, auditing puts additional load on your {+clusters+} and increases costs. 
To optimize costs, you can disable auditing in lower environments for development. 
Certain industries, like healthcare and financial services, may opt to keep 
auditing enabled in development for compliance reasons.

Enabling auditing for all database users, including application
service users, might affect cluster performance. We recommend that you audit only the actions of users that require auditing.

For staging and production environments, enable auditing for
additional security. We recommend that you audit the following events at a minimum:

- Failed logon
- Session activity
- Logon and logoff
- Attempts to perform unauthorized functions
- Password change
- Database User Access Changes
- DDL & System configuration stored procedures
- Modification of Native audit
- Run a backup or restore
- Alter DBMS native audit settings
- Alter security
- Database Start and Stop Commands

For all of the previous events, you should include the following
information at a minimum:

- Session ID
- Client hostname and IP address
- Database server hostname and IP address
- Database user
- OS user
- Database name
- Service/instance name
- Port
- Application
- Query
- SQL command
- Object
- Timestamp
- Error code (if applicable)

Recommendations for Audit Logs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To integrate with tools beyond the built-in integrations, we recommend
that you retrieve logs with the following tools and feed the JSON-formatted output to your external tools:

- If you use |aws|, you can continually push logs to an |aws| S3
  bucket. To learn more, see the
  :oas-atlas-tag:`Push-Based Log Export <Push-Based-Log-Export>` {+atlas-admin-api+} endpoints.
- Use the {+atlas-admin-api+} endpoints for :oas-atlas-tag:`Logs <MongoDB-Cloud-Users>` and :oas-atlas-tag:`Project Events <Events>` to
  retrieve deployment logs and lists of project events.
- Use the ``atlas deployments logs`` command in the {+atlas-cli+}
  to retrieve deployment logs. To learn more,
  see :atlas:`Atlas Deployment Logs 
  </cli/current/command/atlas-deployments-logs/>`.

Examples
--------

The following examples show how to download logs and enable auditing
using |service| :ref:`tools for automation <arch-center-automation>`.

In addition to the following examples, see the blogpost
`Streamlining Log Management to Amazon S3 Using Atlas Push-based Log Exports With HashiCorp Terraform <https://www.mongodb.com/developer/products/atlas/streamlining-log-management-amazon-s3-atlas-push-based-log-exports-hashicorp-terraform/>`__.

.. tabs::

   .. tab:: CLI
      :tabid: cli

      Download Logs
      ~~~~~~~~~~~~~

      Run the following CLI command to download a compressed file that contains the
      MongoDB logs for the specified host in your project.

      .. include:: /includes/examples/cli-example-download-logs.rst

   .. tab:: Terraform
      :tabid: Terraform
 
      The following example demonstrates how to enable auditing for
      your deployment. Before you can create resources with Terraform,
      you must:

      - :ref:`Create your paying organization <configure-paying-org>`
        and :ref:`create an API key <atlas-admin-api-access>` for the
        paying organization. Store your public and private keys as
        environment variables by running the following commands in the terminal:

        .. code-block::

           export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
           export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

      - `Install Terraform <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__.

      Enable Auditing and Create an Auditing Filter for the {+Cluster+}
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      .. include:: /includes/examples/tf-example-auditing-filter.rst
