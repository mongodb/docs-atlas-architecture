
.. _arch-center-authentication-recs:

========================================
Guidance for {+service+} Authentication
========================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:   
   :description: Learn about the different authentication mechanisms that Atlas supports.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol


Recommendations for {+service+} Authentication
--------------------------------------------------------------------------

|service-fullname| supports a variety of authentication methods to
ensure robust security. |service| requires all users to authenticate to 
access the {+atlas-ui+}, |service| databases, and  the {+atlas-admin-api+}. 

.. note:: 

   In this context, a "user" can be a human or an application. We refer to 
   human users as "Workforce Identity" and applications as 
   "Workload Identity".

The following table provides guidance on the recommended authentication methods 
for staging and production ("upper") environments, and other methods you might 
use in development and test ("lower") environments. 

.. list-table:: 
   :widths: 10 13 40 37
   :header-rows: 1

   * - Resource
     - User 
     - Recommendations for Production
     - Options for Dev and Test

   * - Atlas UI 
     - Workforce (Human)
     - | Use :ref:`Federated Auth <arch-center-federated_auth>` with an SAML 2.0 
         identity provider, such as Okta, Microsoft Entra ID, or Ping Identity. 
       | -- *or* --
       | Use :ref:`Multi-factor Authentication (MFA) <arch-center-mfa>`.
       | -- *and* --
       | Use IP access restrictions.
     - | Use Atlas credentials and MFA.
    
   * - Atlas Database
     - Workforce (Human)
     - Use :ref:`Workforce Identity Federation <arch-center-workforce_if>`
     - | Use :ref:`X.509 <arch-center-x509>` certificates or :ref:`SCRAM <arch-center-scram>`.
       | Consider :ref:`creating temporary database users <arch-center-just-in-time>`
         with just-in-time database access.
    
   * - Atlas Database
     - Workload (Application)
     - | Use :ref:`Workload Identity Federation <arch-center-workload_if>`.
       | -- *or* --
       | Use :ref:`AWS-IAM authentication <arch-center-iam>`.
       | -- *or* --
       | Use :ref:`X.509 <arch-center-x509>` certificates
     - :ref:`X.509 <arch-center-x509>` certificates or :ref:`SCRAM <arch-center-scram>`

   * - Atlas APIs
     - Workforce (Human)
     - Use :ref:`<arch-center-admin-service-accounts>`.
     - Use :ref:`<arch-center-admin-service-accounts>` or 
       :ref:`<arch-center-admin-api-keys>`.

   * - Atlas APIs
     - Workload (Application)
     - Use :ref:`<arch-center-admin-service-accounts>`.
     - :ref:`<arch-center-admin-api-keys>`

.. collapsible::
   :heading: Single-Region Deployment Recommendations
   :sub_heading: Recommendations that apply only to deployments in a single region
   :expanded: true

   <<Recommendations that apply only to deployments in a single region here>>

.. collapsible::
   :heading: Multi-Region and Multi-Cloud Deployment Recommendations
   :sub_heading: Recommendations that apply only to deployments across multiple regions or multiple cloud providers
   :expanded: true

   <<Recommendations that apply only to deployments across multiple regions or multiple cloud providers here>>


The following sections provide details about the authentication methods. 

.. _arch-center-federated_auth:

Federated Authentication
~~~~~~~~~~~~~~~~~~~~~~~~
Federated authentication allows you to manage all authentication to
the {+atlas-ui+} across multiple systems and applications through a
central identity provider. You can use any :abbr:`SAML (Security Assertion
Markup Language)` compatible identity provider such as Okta, Microsoft
Entra ID, or Ping Identity to enforce security policies such as password 
complexity, credential rotation, and :abbr:`MFA (Multi-Factor
Authentication)` within your identity provider. 

You must also configure the IP access list in the {+atlas-ui+} to allow only 
connections from IP ranges that include your users and application servers.

Workforce Identity Federation
`````````````````````````````
Workforce Identity Federation allows you to manage all authentication to 
the |service| database through your identity provider. To learn more, 
see :ref:`oidc-authentication-workforce`.

.. _arch-center-workload_if:

Workload Identity Federation
````````````````````````````
Workload Identity Federation enables applications running in cloud
environments like |azure| and Google Cloud to authenticate with
|service| without the need to manage separate database user credentials.
With Workload Identity Federation, you can manage |service| database
users using |azure| Managed Identities, Google Service Accounts, or any
OAuth 2.0-compliant service. These authentication mechanisms simplify
management and enhance security by allowing for passwordless access to
the |service| database. 

To learn more, refer to :ref:`oidc-authentication-workload` and 
:ref:`atlas-federated-authentication`.

.. _arch-center-mfa:

Multi-Factor Authentication 
~~~~~~~~~~~~~~~~~~~~~~~~~~~

For any human user that has access to the |service| control plane, we recommend 
:abbr:`MFA (Multi-Factor Authentication)` for enhanced security. When 
:abbr:`MFA (Multi-Factor Authentication)` is enabled, |service| requires 
two forms of identification: 

- The user's credentials 
- One of the following recommended factors: 

  - Security keys
  - Biometrics
  - OTP authenticators 
  - Push notifications
  - SMS (not recommended as primary factor)
  - Email (not recommended as primary factor)

.. note::
   
   If you are using Federated Auth, you configure and manage MFA in the 
   :abbr:`IdP (Identity Provider)`. If you are using |service| credentials, 
   MFA is configured and managed within |service|. MFA is required when 
   using |service| credentials.

To learn more, see :ref:`atlas-enable-mfa`.

.. _arch-center-workforce_if:



.. _arch-center-iam:

AWS IAM Role Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also authenticate through |aws| |iam| roles. To learn more, 
refer to :ref:`set-up-pwdless-auth`.

.. _arch-center-x509:

X.509 Client Certificates 
~~~~~~~~~~~~~~~~~~~~~~~~~

If you don't have an identity provider for federation,
|service| also supports X.509 client certificates for 
user authentication. X.509 certificates provide the security of mutual TLS, 
making them suitable for staging and production environments, and you
can bring your own certificate authority for use with X.509.
The disadvantage of X.509 is that you must manage certificates and
the security of these certificates on the application side, while
Workload Identity Federation allows for password-less access and easier
application security.

To learn more, refer to :manual:`X.509 </core/security-x.509/>`.

.. _arch-center-scram:

SCRAM Password Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|service| {+clusters+} support SCRAM password authentication for user authentication, 
but we recommend SCRAM only for use in development and test environments. 

If you leverage X.509 or SCRAM authentication, we recommend that you use 
third-party secrets manager like 
`HashiCorp Vault <https://developer.hashicorp.com/vault/docs/secrets/databases/mongodbatlas>`__
or |aws| Secrets Manager to generate and store complex database credentials. 

To learn more, refer to :manual:`SCRAM </core/security-scram/>`.

.. _arch-center-just-in-time:

Just-in-Time Access 
~~~~~~~~~~~~~~~~~~~

|service| also supports creating temporary database users
that automatically expire after the predefined times. A user can be
created for 6 hours, 1 day, or 1 week.

To learn more, see :ref:`mongodb-users`. 

.. _arch-center-secrets:

Secrets Management
~~~~~~~~~~~~~~~~~~

We recommend using a third-party secrets manager like `HashiCorp Vault
<https://developer.hashicorp.com/vault/docs/secrets/databases/mongodbatlas>`__
or |aws| Secrets Manager to generate and store complex database credentials.
A secrets manager can generate database credentials dynamically based on configured
roles for |service| databases. 

To learn more, see the blog :website:`Manage
MongoDB Atlas Database Secrets in HashiCorp Vault 
</blog/post/manage-atlas-database-secrets-hashicorp-vault>`.

.. _arch-center-admin-service-accounts:

Service Accounts
~~~~~~~~~~~~~~~~

Service accounts use industry-standard OAuth2.0 to securely authenticate
with {+service+} through the {+atlas-admin-api+}. We recommend that you use service accounts instead of |api| keys when possible because they provide added security through use short-lived
access tokens and required credential rotations.

Service accounts are
available as a Preview feature, and you can manage programmatic access for service accounts only by using the {+atlas-ui+} or the {+atlas-admin-api+}. You can't manage
programmatic access for service accounts through the {+atlas-cli+} or Terraform.

To learn more, see :atlas:`Service Accounts Overview </api/service-accounts-overview/>`.

.. _arch-center-admin-api-keys: 

API Keys
~~~~~~~~

If you don't use service accounts, you can use |api| key-based authentication to securely manage
programmatic access. |api| key-based authentication uses |http| Digest authentication to protect requests.
The |api| public key functions as the username, and the corresponding
private key serves as the password. 
You should store these keys in a third party secrets management system, 
such as |aws| Secrets Manager or {+vault+}. To learn how to securely store these 
keys in Vault, see the blog 
`Manage MongoDB Atlas Database Secrets in HashiCorp Vault <https://www.mongodb.com/blog/post/manage-atlas-database-secrets-hashicorp-vault>`__.

To further enhance security and minimize the risk of unauthorized access:

- Follow best practices for
  rotating |api| keys regularly. To learn how to rotate these keys with 
  {+vault+}, for example, see `the Hashicorp documentation <https://developer.hashicorp.com/vault/docs/secrets/mongodbatlas>`__.

- Use the IP access list for your API keys. To learn more, see
  :atlas:`Require an IP Access List for the {+atlas-admin-api+} 
  </configure-api-access/#optional--require-an-ip-access-list-for-the-atlas-administration-api>`.

To learn more, see :ref:`api-authentication`.

Deployments 
```````````
To learn our recommendations for deployments, which relate to authentication, 
see :ref:`arch-center-hierarchy`.


